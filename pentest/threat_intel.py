import os
import logging
import requests
from typing import List, Dict, Any

log = logging.getLogger(__name__)

OTX_API_KEY = os.getenv("OTX_API_KEY")
ABUSEIPDB_API_KEY = os.getenv("ABUSEIPDB_API_KEY")

def get_otx_pulses_by_indicator(indicator_type: str, indicator_value: str) -> List[Dict[str, Any]]:
    """Obtiene pulsos de AlienVault OTX para un indicador dado.

    Args:
        indicator_type: Tipo de indicador (ej. "IPv4", "domain").
        indicator_value: Valor del indicador.

    Returns:
        Lista de pulsos de OTX.
    """
    if not OTX_API_KEY:
        log.warning("OTX_API_KEY no configurada. Se omitirá la comprobación de OTX.")
        return []

    url = f"https://otx.alienvault.com/api/v1/indicators/{indicator_type}/{indicator_value}/pulses"
    headers = {"X-OTX-API-KEY": OTX_API_KEY}
    try:
        response = requests.get(url, headers=headers, timeout=5)
        response.raise_for_status()
        return response.json().get("results", [])
    except requests.exceptions.RequestException as e:
        log.error(f"Error al consultar AlienVault OTX para {indicator_value}: {e}")
        return []

def get_abuseipdb_score(ip: str) -> int:
    """Obtiene la puntuación de confianza de AbuseIPDB para una IP.

    Args:
        ip: Dirección IP a consultar.

    Returns:
        Puntuación de confianza (0-100) o 0 si hay un error.
    """
    if not ABUSEIPDB_API_KEY:
        log.warning("ABUSEIPDB_API_KEY no configurada. Se omitirá la comprobación de AbuseIPDB.")
        return 0

    url = "https://api.abuseipdb.com/api/v2/check"
    headers = {
        "Key": ABUSEIPDB_API_KEY,
        "Accept": "application/json"
    }
    params = {
        "ipAddress": ip,
        "maxAgeInDays": 90
    }
    try:
        response = requests.get(url, headers=headers, params=params, timeout=5)
        response.raise_for_status()
        data = response.json().get("data", {})
        return data.get("abuseConfidenceScore", 0)
    except requests.exceptions.RequestException as e:
        log.error(f"Error al consultar AbuseIPDB para {ip}: {e}")
        return 0

def check_threat_feeds(ip: str) -> List[str]:
    """Comprueba fuentes de inteligencia de amenazas (OTX, AbuseIPDB) para una IP.

    Args:
        ip: Dirección IP a comprobar.

    Returns:
        Lista de fuentes donde se encontró la IP.
    """
    hits = []
    if get_otx_pulses_by_indicator("IPv4", ip):
        hits.append("OTX")
    if get_abuseipdb_score(ip) > 50:
        hits.append("AbuseIPDB")
    return hits