#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demostración del sistema de reportes refactorizado con análisis avanzado.
Este archivo muestra cómo utilizar todas las nuevas funcionalidades implementadas.
"""

import json
import logging
from pathlib import Path
from typing import Dict, Any

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

log = logging.getLogger(__name__)

def create_sample_data() -> Dict[str, Any]:
    """
    Crea datos de muestra para demostrar el sistema.
    """
    return {
        'nuclei_data': [
            {
                'template-id': 'CVE-2021-44228',
                'info': {
                    'name': 'Apache Log4j RCE',
                    'severity': 'critical',
                    'description': 'Apache Log4j2 Remote Code Execution',
                    'classification': {'cvss-score': 10.0},
                    'tags': ['cve', 'log4j', 'rce']
                },
                'host': 'https://example.com',
                'matched-at': 'https://example.com/login'
            },
            {
                'template-id': 'sql-injection',
                'info': {
                    'name': 'SQL Injection',
                    'severity': 'high',
                    'description': 'SQL Injection vulnerability detected',
                    'classification': {'cvss-score': 8.5},
                    'tags': ['sqli', 'injection']
                },
                'host': 'https://api.example.com',
                'matched-at': 'https://api.example.com/users'
            },
            {
                'template-id': 'xss-reflected',
                'info': {
                    'name': 'Reflected XSS',
                    'severity': 'medium',
                    'description': 'Reflected Cross-Site Scripting',
                    'classification': {'cvss-score': 6.1},
                    'tags': ['xss', 'reflected']
                },
                'host': 'https://blog.example.com',
                'matched-at': 'https://blog.example.com/search'
            }
        ],
        'nmap_data': [
            {
                'port': 22,
                'state': 'open',
                'service': {'name': 'ssh', 'version': 'OpenSSH 8.0'}
            },
            {
                'port': 80,
                'state': 'open',
                'service': {'name': 'http', 'version': 'Apache 2.4.41'}
            },
            {
                'port': 443,
                'state': 'open',
                'service': {'name': 'https', 'version': 'Apache 2.4.41'}
            }
        ],
        'httpx_data': [
            {
                'url': 'https://example.com',
                'title': 'Example Corp - Home',
                'status_code': 200,
                'content_length': 1024
            },
            {
                'url': 'https://api.example.com',
                'title': 'API Gateway',
                'status_code': 200,
                'content_length': 512
            }
        ],
        'leaks_data': [
            {
                'email': 'admin@example.com',
                'breach': 'Collection #1',
                'date': '2019-01-07'
            },
            {
                'email': 'user@example.com',
                'breach': 'LinkedIn',
                'date': '2021-06-22'
            }
        ],
        'dir_brute_data': [
            {
                'url': 'https://example.com/admin',
                'status': 200,
                'size': 1024
            },
            {
                'url': 'https://example.com/.env',
                'status': 200,
                'size': 256
            }
        ],
        'cves_data': [
            {
                'cve_id': 'CVE-2021-44228',
                'description': 'Apache Log4j2 RCE',
                'cvss_score': 10.0,
                'severity': 'CRITICAL'
            }
        ],
        'subdomains_data': [
            'www.example.com',
            'api.example.com',
            'blog.example.com',
            'admin.example.com'
        ],
        'typosquats_data': [
            {
                'domain': 'examp1e.com',
                'similarity': 0.95,
                'registered': True
            }
        ]
    }

def demonstrate_data_loading():
    """
    Demuestra el sistema de carga de datos mejorado.
    """
    log.info("=== Demostración: Carga de Datos ===")
    
    from pentest.report_refactored import ReportConfig, JSONDataLoader
    
    # Crear configuración
    config = ReportConfig(
        validate_input=True,
        enable_correlation=True
    )
    
    # Crear cargador de datos
    data_loader = JSONDataLoader(config)
    
    # Crear datos de muestra
    sample_data = create_sample_data()
    
    # Simular carga desde diferentes fuentes
    log.info(f"Datos Nuclei cargados: {len(sample_data['nuclei_data'])} vulnerabilidades")
    log.info(f"Datos Nmap cargados: {len(sample_data['nmap_data'])} puertos")
    log.info(f"Datos HTTPx cargados: {len(sample_data['httpx_data'])} aplicaciones web")
    log.info(f"Credenciales filtradas: {len(sample_data['leaks_data'])} cuentas")
    
    return sample_data

def demonstrate_correlation_analysis():
    """
    Demuestra el motor de análisis de correlación.
    """
    log.info("\n=== Demostración: Análisis de Correlación ===")
    
    from pentest.correlation_engine import create_correlation_engine
    
    # Crear motor de correlación
    correlation_engine = create_correlation_engine()
    
    # Datos de muestra
    sample_data = create_sample_data()
    
    # Ejecutar análisis de correlación
    correlations = correlation_engine.analyze_all_correlations(sample_data)
    
    log.info("Correlaciones identificadas:")
    for correlation_type, results in correlations.items():
        if isinstance(results, list) and results:
            log.info(f"  - {correlation_type}: {len(results)} correlaciones")
        elif isinstance(results, dict) and results:
            log.info(f"  - {correlation_type}: {results}")
    
    return correlations

def demonstrate_intelligent_scoring():
    """
    Demuestra el sistema de puntuación inteligente.
    """
    log.info("\n=== Demostración: Puntuación Inteligente ===")
    
    from pentest.intelligent_scoring import (
        create_scoring_engine,
        create_asset_context,
        create_vulnerability_context,
        AssetType,
        BusinessCriticality
    )
    
    # Crear motor de puntuación
    scoring_engine = create_scoring_engine()
    
    # Crear contexto del activo
    asset_context = create_asset_context(
        asset_type=AssetType.WEB_APPLICATION,
        business_criticality=BusinessCriticality.HIGH,
        exposure_level="internet_facing",
        compliance_requirements=["PCI-DSS", "GDPR"]
    )
    
    # Analizar vulnerabilidades con contexto
    sample_data = create_sample_data()
    total_score = 0
    
    for vuln in sample_data['nuclei_data']:
        vuln_context = create_vulnerability_context(
            vulnerability_id=vuln['template-id'],
            severity=vuln['info']['severity'],
            cvss_score=vuln['info']['classification']['cvss-score'],
            exploit_available=bool(vuln['info']['tags']),
            affected_component=vuln['host'],
            attack_vector="network"
        )
        
        intelligent_score = scoring_engine.calculate_intelligent_score(
            vuln_context, asset_context
        )
        
        total_score += intelligent_score.total_score
        
        log.info(f"  Vulnerabilidad: {vuln['info']['name']}")
        log.info(f"    Puntuación base: {intelligent_score.base_score}")
        log.info(f"    Puntuación total: {intelligent_score.total_score}")
        log.info(f"    Factores de riesgo: {len(intelligent_score.risk_factors)}")
    
    log.info(f"\nPuntuación total del sistema: {total_score:.2f}")
    
    return total_score

def demonstrate_trend_analysis():
    """
    Demuestra el sistema de análisis de tendencias.
    """
    log.info("\n=== Demostración: Análisis de Tendencias ===")
    
    from pentest.trend_analysis import create_trend_engine
    
    # Crear motor de tendencias
    trend_engine = create_trend_engine()
    
    # Datos de muestra
    sample_data = create_sample_data()
    
    # Ejecutar análisis de tendencias
    trends = trend_engine.analyze_all_trends(sample_data)
    
    log.info("Tendencias identificadas:")
    for trend_type, analysis in trends.items():
        if isinstance(analysis, dict) and 'trend' in analysis:
            log.info(f"  - {trend_type}: {analysis['trend']} ({analysis.get('confidence', 0):.1f}% confianza)")
    
    return trends

def demonstrate_visualizations():
    """
    Demuestra el sistema de visualizaciones avanzadas.
    """
    log.info("\n=== Demostración: Visualizaciones Avanzadas ===")
    
    from pentest.visualizations import AdvancedVisualizations, ChartConfig
    
    # Crear motor de visualizaciones
    visualizations = AdvancedVisualizations()
    
    # Datos de muestra
    sample_data = create_sample_data()
    
    # Configuración de gráfico
    config = ChartConfig(
        title="Distribución de Severidad",
        width=800,
        height=400,
        theme="modern"
    )
    
    # Generar gráfico de severidad
    severity_data = {
        'critical': 1,
        'high': 1,
        'medium': 1,
        'low': 0,
        'info': 0
    }
    
    severity_chart = visualizations.create_severity_distribution_chart(
        severity_data, config
    )
    
    log.info("Visualizaciones generadas:")
    log.info(f"  - Gráfico de severidad: {len(severity_chart)} caracteres de HTML")
    
    # Generar timeline
    timeline_chart = visualizations.create_vulnerability_timeline(
        sample_data['nuclei_data'], config
    )
    
    log.info(f"  - Timeline de vulnerabilidades: {len(timeline_chart)} caracteres de HTML")
    
    return {
        'severity_chart': severity_chart,
        'timeline_chart': timeline_chart
    }

def demonstrate_full_report_generation():
    """
    Demuestra la generación completa de un reporte.
    """
    log.info("\n=== Demostración: Generación Completa de Reporte ===")
    
    from pentest.report_refactored import (
        create_default_report_generator,
        ReportConfig
    )
    
    # Crear configuración personalizada
    config = ReportConfig(
        template_name="report_enhanced.html",
        validate_input=True,
        enable_correlation=True,
        pdf_quality="high"
    )
    
    # Crear generador de reportes
    generator = create_default_report_generator(config)
    
    log.info("Generador de reportes creado con:")
    log.info(f"  - Plantilla: {config.template_name}")
    log.info(f"  - Validación habilitada: {config.validate_input}")
    log.info(f"  - Correlación habilitada: {config.enable_correlation}")
    log.info(f"  - Calidad PDF: {config.pdf_quality}")
    
    # Simular datos de archivos
    sample_data = create_sample_data()
    
    # Procesar datos
    processed_data = generator.processor.process_data(sample_data)
    
    log.info("\nDatos procesados:")
    log.info(f"  - Métricas calculadas: {len(processed_data['metrics'])} métricas")
    log.info(f"  - Correlaciones: {len(processed_data['correlations'])} tipos")
    log.info(f"  - Puntuación de riesgo: {processed_data['risk_assessment']['score']:.1f}")
    log.info(f"  - Nivel de riesgo: {processed_data['risk_assessment']['level']}")
    log.info(f"  - Recomendaciones: {len(processed_data['recommendations'])} generadas")
    
    return processed_data

def demonstrate_configuration_system():
    """
    Demuestra el sistema de configuración centralizada.
    """
    log.info("\n=== Demostración: Sistema de Configuración ===")
    
    from pentest.config_centralized import PentestConfig
    
    # Crear configuración centralizada
    config = PentestConfig()
    
    log.info("Configuración centralizada cargada:")
    log.info(f"  - Configuración Redis: {config.redis.url}")
    log.info(f"  - Timeout HTTP: {config.timeouts.http_timeout}s")
    log.info(f"  - Límite de peticiones WAF: {config.waf_evasion.request_limit}")
    log.info(f"  - Configuración de reportes: {config.reports.template_dir}")
    log.info(f"  - Configuración ML: {config.ml.enabled}")
    
    # Demostrar serialización
    config_dict = config.to_dict()
    log.info(f"  - Configuración serializada: {len(config_dict)} secciones")
    
    return config

def main():
    """
    Función principal que ejecuta todas las demostraciones.
    """
    log.info("🚀 Iniciando demostración del sistema de reportes refactorizado")
    log.info("=" * 70)
    
    try:
        # 1. Demostrar carga de datos
        sample_data = demonstrate_data_loading()
        
        # 2. Demostrar análisis de correlación
        correlations = demonstrate_correlation_analysis()
        
        # 3. Demostrar puntuación inteligente
        total_score = demonstrate_intelligent_scoring()
        
        # 4. Demostrar análisis de tendencias
        trends = demonstrate_trend_analysis()
        
        # 5. Demostrar visualizaciones
        visualizations = demonstrate_visualizations()
        
        # 6. Demostrar generación completa
        processed_data = demonstrate_full_report_generation()
        
        # 7. Demostrar configuración
        config = demonstrate_configuration_system()
        
        log.info("\n" + "=" * 70)
        log.info("✅ Demostración completada exitosamente")
        log.info("\n📊 Resumen de capacidades demostradas:")
        log.info("  ✓ Carga de datos con validación y normalización")
        log.info("  ✓ Análisis de correlación avanzado")
        log.info("  ✓ Sistema de puntuación inteligente")
        log.info("  ✓ Análisis de tendencias temporales")
        log.info("  ✓ Visualizaciones interactivas")
        log.info("  ✓ Generación de reportes completos")
        log.info("  ✓ Configuración centralizada")
        log.info("  ✓ Arquitectura modular y extensible")
        
        return True
        
    except Exception as e:
        log.error(f"❌ Error durante la demostración: {e}")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)