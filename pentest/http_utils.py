"""Configuración centralizada para peticiones HTTP con evasión anti-WAF."""

import logging
import random
import requests
import urllib3
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

from pentest.config import WAF_EVASION_CONFIG, WAF_USER_AGENTS, WAF_COMMON_HEADERS

# Configuración de logging
log = logging.getLogger(__name__)

# Suprimir advertencias de certificados no verificados
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Configuración de reintentos con evasión anti-WAF
config = WAF_EVASION_CONFIG

# Asegurar que las claves necesarias existen
if not config or 'retry_attempts' not in config:
    config = {
        "max_requests_per_domain": 10,
        "request_delay_min": 1,
        "request_delay_max": 3,
        "connect_timeout": 10,
        "max_time": 20,
        "max_redirects": 3,
        "retry_attempts": 1,
        "retry_delay": 2,
    }

retry_strategy = Retry(
    total=config['retry_attempts'],
    backoff_factor=config['retry_delay'],
    status_forcelist=[429, 500, 502, 503, 504],
    allowed_methods=["GET", "POST", "HEAD"]
)

# Sesión HTTP global con reintentos y evasión anti-WAF
session = requests.Session()
adapter = HTTPAdapter(max_retries=retry_strategy)
session.mount("http://", adapter)
session.mount("https://", adapter)

# Configurar headers anti-WAF
session.headers.update(WAF_COMMON_HEADERS)

# Asegurar que WAF_USER_AGENTS no esté vacío
user_agents = WAF_USER_AGENTS if WAF_USER_AGENTS else [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
]
session.headers.update({"User-Agent": random.choice(user_agents)})
session.verify = False  # Ignorar certificados SSL

def get_session() -> requests.Session:
    """Devuelve la sesión HTTP global con configuración anti-WAF."""
    # Rotar User-Agent en cada llamada para mayor evasión
    user_agents = WAF_USER_AGENTS if WAF_USER_AGENTS else [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    ]
    session.headers.update({"User-Agent": random.choice(user_agents)})
    return session