"""Módulo para reconocimiento de subdominios."""

import json
import logging
import os
from pathlib import Path
from typing import List, Optional
from concurrent.futures import ThreadPoolExecutor, as_completed

from pentest.runners import run_cmd
from pentest.exceptions import ReconError
from pentest.config import DEFAULT_TIMEOUT, AMASS_TIMEOUT

# Configuración de logging
log = logging.getLogger(__name__)

def check_tools_availability():
    """Verifica que las herramientas necesarias estén disponibles."""
    tools = {
        'subfinder': ['-version'],
        'amass': ['-version']
    }
    for tool, version_args in tools.items():
        try:
            run_cmd([tool] + version_args, ignore=True)
            log.info(f'✅ {tool} está disponible')
        except Exception as e:
            log.error(f'❌ {tool} no está disponible: {e}')

# Verificar disponibilidad de herramientas al cargar el módulo
check_tools_availability()

def recon(domain: str, tmp_dir: Path, *, brute: bool = False) -> Path:
    """Realiza reconocimiento de subdominios utilizando amass y subfinder.
    
    Args:
        domain: Dominio objetivo
        tmp_dir: Directorio temporal para almacenar resultados
        brute: Si se debe realizar fuerza bruta (más lento pero más completo)
        
    Returns:
        Path al archivo JSON con los subdominios encontrados
        
    Raises:
        ReconError: Si fallan todas las herramientas de reconocimiento
    """
    log.info("🔍 [RECON] Iniciando reconocimiento de subdominios para %s", domain)
    log.info("🔍 [RECON] Directorio temporal: %s", tmp_dir)
    log.info("🔍 [RECON] Modo brute force: %s", brute)
    
    output_file = tmp_dir / "subdomains.txt"
    subdomains = set()
    
    # Log del entorno
    import os
    log.info("🔍 [RECON] Variables de entorno relevantes:")
    log.info("🔍 [RECON] PATH: %s", os.environ.get('PATH', 'No definido'))
    log.info("🔍 [RECON] HOME: %s", os.environ.get('HOME', 'No definido'))
    log.info("🔍 [RECON] PWD: %s", os.environ.get('PWD', 'No definido'))

    with ThreadPoolExecutor(max_workers=2) as executor:
        subfinder_future = executor.submit(run_subfinder, domain)
        amass_future = executor.submit(run_amass, domain)

        # Collect results from both futures
        subfinder_result = []
        amass_result = []

        try:
            subfinder_result = subfinder_future.result()
            log.info("Subfinder completó. Encontró %d subdominios.", len(subfinder_result))
            subdomains.update(subfinder_result)
        except Exception as e:
            log.error("Error al obtener resultados de Subfinder: %s", e)

        try:
            amass_result = amass_future.result()
            log.info("Amass completó. Encontró %d subdominios.", len(amass_result))
            subdomains.update(amass_result)
        except Exception as e:
            log.error("Error al obtener resultados de Amass: %s", e)

    log.info("Total de subdominios encontrados antes de guardar: %d", len(subdomains))

    # Si no se encontraron subdominios, añadir el dominio principal
    if not subdomains:
        log.warning("🔍 [RECON] ⚠️ No se encontraron subdominios, añadiendo dominio principal: %s", domain)
        subdomains.add(domain)
    
    log.info("🔍 [RECON] Total de subdominios únicos encontrados: %d", len(subdomains))
    log.info("🔍 [RECON] Lista de subdominios: %s", sorted(list(subdomains)))
    
    # Escribir subdominios al archivo
    try:
        with open(output_file, "w") as f:
            for subdomain in sorted(subdomains):
                f.write(f"{subdomain}\n")
        
        # Verificar que el archivo se escribió correctamente
        if output_file.exists():
            file_size = output_file.stat().st_size
            log.info("🔍 [RECON] ✅ Archivo %s creado exitosamente (tamaño: %d bytes)", output_file, file_size)
            
            # Leer y mostrar el contenido del archivo para verificación
            with open(output_file, "r") as f:
                content = f.read().strip()
                log.info("🔍 [RECON] Contenido del archivo subdomains.txt: %s", content)
        else:
            log.error("🔍 [RECON] ❌ Error: El archivo %s no se creó", output_file)
            
    except Exception as e:
        log.error("🔍 [RECON] ❌ Error al escribir archivo %s: %s", output_file, e)
        raise ReconError(f"Error al escribir archivo de subdominios: {e}")
    
    log.info("🔍 [RECON] ✅ Reconocimiento completado. %d subdominios guardados en %s", len(subdomains), output_file)
    return output_file

# Helper functions for running tools
def run_subfinder(domain: str) -> List[str]:
    log.info("🔧 [SUBFINDER] Ejecutando subfinder para %s", domain)
    try:
        # Primero verificar si subfinder está disponible
        version_cmd = ["subfinder", "-version"]
        log.info("🔧 [SUBFINDER] Verificando disponibilidad con comando: %s", " ".join(version_cmd))
        version_output = run_cmd(version_cmd, ignore=True, timeout=10)
        log.info("🔧 [SUBFINDER] Versión de subfinder: %s", version_output.strip())
        log.info("🔧 [SUBFINDER] ✅ Subfinder está disponible")
    except Exception as e:
        log.error("🔧 [SUBFINDER] ❌ Error al verificar la versión de subfinder: %s", e)
        log.error("🔧 [SUBFINDER] ❌ Subfinder no está disponible o no funciona correctamente")
        return []

    try:
        subfinder_cmd = ["subfinder", "-d", domain, "-silent", "-o", "/dev/stdout"]
        log.info("🔧 [SUBFINDER] Ejecutando comando: %s", " ".join(subfinder_cmd))
        subfinder_output = run_cmd(subfinder_cmd, timeout=120)
        log.info("🔧 [SUBFINDER] Salida cruda (primeros 500 chars): %s", subfinder_output[:500])
        
        if subfinder_output:
            found = [line.strip() for line in subfinder_output.split("\n") if line.strip()]
            log.info("🔧 [SUBFINDER] ✅ Subfinder encontró %d subdominios", len(found))
            if found:
                log.info("🔧 [SUBFINDER] Primeros 5 subdominios: %s", found[:5])
            return found
        else:
            log.warning("🔧 [SUBFINDER] ⚠️ Subfinder no devolvió ninguna salida.")
            return []
    except Exception as e:
        log.error("🔧 [SUBFINDER] ❌ Error ejecutando subfinder: %s", e)
        log.error("🔧 [SUBFINDER] ❌ Tipo de error: %s", type(e).__name__)
        return []

def run_amass(domain: str, *, brute: bool = False) -> List[str]:
    log.info("🔧 [AMASS] Ejecutando amass para %s (brute=%s)", domain, brute)
    try:
        # Primero verificar si amass está disponible
        version_cmd = ["amass", "-version"]
        log.info("🔧 [AMASS] Verificando disponibilidad con comando: %s", " ".join(version_cmd))
        version_output = run_cmd(version_cmd, ignore=True, timeout=10)
        log.info("🔧 [AMASS] Versión de amass: %s", version_output.strip())
        log.info("🔧 [AMASS] ✅ Amass está disponible")
    except Exception as e:
        log.error("🔧 [AMASS] ❌ Error al verificar la versión de amass: %s", e)
        log.error("🔧 [AMASS] ❌ Amass no está disponible o no funciona correctamente")
        return []

    try:
        amass_cmd = ["amass", "enum", "-d", domain, "-silent"]
        if brute:
            amass_cmd.append("-brute")
        log.info("🔧 [AMASS] Ejecutando comando: %s", " ".join(amass_cmd))
        amass_output = run_cmd(amass_cmd, timeout=300)
        log.info("🔧 [AMASS] Salida cruda (primeros 500 chars): %s", amass_output[:500])
        
        if amass_output:
            found = [line.strip() for line in amass_output.splitlines() 
                    if line.strip() and domain in line.strip()]
            log.info("🔧 [AMASS] ✅ Amass encontró %d subdominios", len(found))
            if found:
                log.info("🔧 [AMASS] Primeros 5 subdominios: %s", found[:5])
            return found
        else:
            log.warning("🔧 [AMASS] ⚠️ Amass no devolvió ninguna salida.")
            return []
    except Exception as e:
        log.error("🔧 [AMASS] ❌ Error al ejecutar amass: %s", e)
        log.error("🔧 [AMASS] ❌ Tipo de error: %s", type(e).__name__)
        return []