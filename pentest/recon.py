"""M√≥dulo para reconocimiento de subdominios."""

import json
import logging
import os
from pathlib import Path
from typing import List, Optional

from pentest.runners import run_cmd
from pentest.exceptions import ReconError
from pentest.config import DEFAULT_TIMEOUT, AMASS_TIMEOUT

# Configuraci√≥n de logging
log = logging.getLogger(__name__)

def recon(domain: str, tmp_dir: Path, *, brute: bool = False) -> Path:
    """Realiza reconocimiento de subdominios utilizando amass y subfinder.
    
    Args:
        domain: Dominio objetivo
        tmp_dir: Directorio temporal para almacenar resultados
        brute: Si se debe realizar fuerza bruta (m√°s lento pero m√°s completo)
        
    Returns:
        Path al archivo JSON con los subdominios encontrados
        
    Raises:
        ReconError: Si fallan todas las herramientas de reconocimiento
    """
    log.info("üîç Iniciando reconocimiento de subdominios para %s", domain)
    
    output_file = tmp_dir / "subdomains.txt"
    subdomains = set()
    
    # Intentar con amass primero (m√°s completo)
    try:
        log.info("Ejecutando amass para %s", domain)
        amass_cmd = [
            "amass", "enum", 
            "-d", domain,
        ]
        
        if brute:
            amass_cmd.extend(["-brute"])
        
        log.debug("Comando amass: %s", " ".join(amass_cmd))
        amass_output = run_cmd(amass_cmd, timeout=AMASS_TIMEOUT, ignore=True)
        log.debug("Salida de amass: %s", amass_output)
        
        if amass_output:
            found = [line.strip() for line in amass_output.splitlines() if line.strip()]
            log.info("Amass encontr√≥ %d subdominios", len(found))
            subdomains.update(found)
    except Exception as e:
        log.warning("Amass fall√≥: %s", e)
    
    # Intentar con subfinder como alternativa
    if not subdomains:
        try:
            log.info("Ejecutando subfinder para %s", domain)
            subfinder_cmd = ["subfinder", "-d", domain, "-silent"]
            log.debug("Comando subfinder: %s", " ".join(subfinder_cmd))
            subfinder_output = run_cmd(subfinder_cmd, timeout=DEFAULT_TIMEOUT, ignore=True)
            log.debug("Salida de subfinder: %s", subfinder_output)
            
            if subfinder_output:
                found = [line.strip() for line in subfinder_output.splitlines() if line.strip()]
                log.info("Subfinder encontr√≥ %d subdominios", len(found))
                subdomains.update(found)
        except Exception as e:
            log.warning("Subfinder fall√≥: %s", e)
    
    # Verificar si se encontraron subdominios
    if not subdomains:
        # √öltimo recurso: incluir al menos el dominio principal
        log.warning("No se encontraron subdominios con herramientas automatizadas, usando dominio principal")
        subdomains.add(domain)
    
    # Guardar resultados
    with open(output_file, "w") as f:
        for subdomain in sorted(subdomains):
            f.write(f"{subdomain}\n")
    
    log.info("‚úÖ Reconocimiento completado: %d subdominios encontrados", len(subdomains))
    return output_file