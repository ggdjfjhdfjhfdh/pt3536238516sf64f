"""M√≥dulo para reconocimiento de subdominios."""

import json
import logging
import os
from pathlib import Path
from typing import List, Optional
from concurrent.futures import ThreadPoolExecutor, as_completed

from pentest.runners import run_cmd
from pentest.exceptions import ReconError
from pentest.config import DEFAULT_TIMEOUT, AMASS_TIMEOUT

# Configuraci√≥n de logging
log = logging.getLogger(__name__)

def recon(domain: str, tmp_dir: Path, *, brute: bool = False) -> Path:
    """Realiza reconocimiento de subdominios utilizando amass y subfinder.
    
    Args:
        domain: Dominio objetivo
        tmp_dir: Directorio temporal para almacenar resultados
        brute: Si se debe realizar fuerza bruta (m√°s lento pero m√°s completo)
        
    Returns:
        Path al archivo JSON con los subdominios encontrados
        
    Raises:
        ReconError: Si fallan todas las herramientas de reconocimiento
    """
    log.info("üîç Iniciando reconocimiento de subdominios para %s", domain)
    
    output_file = tmp_dir / "subdomains.txt"
    subdomains = set()

    with ThreadPoolExecutor(max_workers=2) as executor:
        amass_future = executor.submit(run_amass, domain, brute)
        subfinder_future = executor.submit(run_subfinder, domain)

        for future in as_completed([amass_future, subfinder_future]):
            try:
                found_subdomains = future.result()
                subdomains.update(found_subdomains)
            except Exception as e:
                log.error("Error al obtener resultados de una herramienta de reconocimiento: %s", e)

    # Verificar si se encontraron subdominios
    if not subdomains:
        log.warning("No se encontraron subdominios con herramientas automatizadas, usando dominio principal")
        subdomains.add(domain)

    # Helper functions for running tools
def run_amass(domain: str, brute: bool) -> List[str]:
    log.info("Ejecutando amass para %s", domain)
    amass_cmd = [
        "amass", "enum",
        "-d", domain,
    ]
    if brute:
        amass_cmd.extend(["-brute"])

    log.info("Comando amass a ejecutar: %s", " ".join(amass_cmd))
    amass_output = run_cmd(amass_cmd, timeout=AMASS_TIMEOUT, ignore=True)
    log.info("Salida cruda de amass (longitud %d): %s", len(amass_output), amass_output[:500])

    if amass_output:
        found = [line.strip() for line in amass_output.splitlines() if line.strip()]
        log.info("Amass encontr√≥ %d subdominios", len(found))
        return found
    else:
        log.warning("Amass no devolvi√≥ ninguna salida.")
        return []

def run_subfinder(domain: str) -> List[str]:
    log.info("Ejecutando subfinder para %s", domain)
    subfinder_cmd = ["subfinder", "-d", domain, "-silent"]
    log.info("Comando subfinder a ejecutar: %s", " ".join(subfinder_cmd))
    subfinder_output = run_cmd(subfinder_cmd, timeout=DEFAULT_TIMEOUT, ignore=True)
    log.info("Salida cruda de subfinder (longitud %d): %s", len(subfinder_output), subfinder_output[:500])

    if subfinder_output:
        found = [line.strip() for line in subfinder_output.splitlines() if line.strip()]
        log.info("Subfinder encontr√≥ %d subdominios", len(found))
        return found
    else:
        log.warning("Subfinder no devolvi√≥ ninguna salida.")
        return []
    
    # Guardar resultados
    with open(output_file, "w") as f:
        for subdomain in sorted(subdomains):
            f.write(f"{subdomain}\n")
    
    log.info("‚úÖ Reconocimiento completado: %d subdominios encontrados", len(subdomains))
    return output_file