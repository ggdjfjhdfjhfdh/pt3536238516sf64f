"""Módulo para reconocimiento de subdominios."""

import json
import logging
import os
from pathlib import Path
from typing import List, Optional
from concurrent.futures import ThreadPoolExecutor, as_completed

from pentest.runners import run_cmd
from pentest.exceptions import ReconError
from pentest.config import DEFAULT_TIMEOUT, AMASS_TIMEOUT

# Configuración de logging
log = logging.getLogger(__name__)

def check_tools_availability():
    """Verifica que las herramientas necesarias estén disponibles."""
    tools = {
        'subfinder': ['-version']
    }
    for tool, version_args in tools.items():
        try:
            run_cmd([tool] + version_args, ignore=True)
            log.info(f'✅ {tool} está disponible')
        except Exception as e:
            log.error(f'❌ {tool} no está disponible: {e}')

# Verificar disponibilidad de herramientas al cargar el módulo
check_tools_availability()

def recon(domain: str, tmp_dir: Path, *, brute: bool = False) -> Path:
    """Realiza reconocimiento de subdominios utilizando amass y subfinder.
    
    Args:
        domain: Dominio objetivo
        tmp_dir: Directorio temporal para almacenar resultados
        brute: Si se debe realizar fuerza bruta (más lento pero más completo)
        
    Returns:
        Path al archivo JSON con los subdominios encontrados
        
    Raises:
        ReconError: Si fallan todas las herramientas de reconocimiento
    """
    log.info("🔍 [RECON] Iniciando reconocimiento de subdominios para %s", domain)
    log.info("🔍 [RECON] Dominio recibido (tipo: %s, longitud: %d): '%s'", type(domain).__name__, len(domain), domain)
    log.info("🔍 [RECON] Representación cruda del dominio: %s", repr(domain))
    log.info("🔍 [RECON] Directorio temporal: %s", tmp_dir)
    log.info("🔍 [RECON] Modo brute force: %s", brute)
    
    output_file = tmp_dir / "subdomains.txt"
    subdomains = set()
    
    # Log del entorno
    import os
    log.info("🔍 [RECON] Variables de entorno relevantes:")
    log.info("🔍 [RECON] PATH: %s", os.environ.get('PATH', 'No definido'))
    log.info("🔍 [RECON] HOME: %s", os.environ.get('HOME', 'No definido'))
    log.info("🔍 [RECON] PWD: %s", os.environ.get('PWD', 'No definido'))

    # Ejecutar solo subfinder (amass deshabilitado)
    try:
        subfinder_result = run_subfinder(domain)
        log.info("Subfinder completó. Encontró %d subdominios.", len(subfinder_result))
        subdomains.update(subfinder_result)
    except Exception as e:
        log.error("Error al obtener resultados de Subfinder: %s", e)
    
    log.info("ℹ️ Amass deshabilitado - usando solo subfinder")

    log.info("Total de subdominios encontrados antes de guardar: %d", len(subdomains))

    # Si no se encontraron subdominios, añadir el dominio principal
    if not subdomains:
        log.warning("🔍 [RECON] ⚠️ No se encontraron subdominios, añadiendo dominio principal: %s", domain)
        log.info("🔍 [RECON] Dominio principal a añadir (repr): %s", repr(domain))
        subdomains.add(domain)
    
    log.info("🔍 [RECON] Total de subdominios únicos encontrados: %d", len(subdomains))
    log.info("🔍 [RECON] Lista de subdominios: %s", sorted(list(subdomains)))
    
    # Escribir subdominios al archivo
    try:
        log.info("🔍 [RECON] Escribiendo %d subdominios al archivo: %s", len(subdomains), output_file)
        with open(output_file, "w") as f:
            for i, subdomain in enumerate(sorted(subdomains)):
                log.info("🔍 [RECON] Escribiendo subdominio %d: '%s' (repr: %s)", i+1, subdomain, repr(subdomain))
                f.write(f"{subdomain}\n")
        
        # Verificar que el archivo se escribió correctamente
        if output_file.exists():
            file_size = output_file.stat().st_size
            log.info("🔍 [RECON] ✅ Archivo %s creado exitosamente (tamaño: %d bytes)", output_file, file_size)
            
            # Leer y mostrar el contenido del archivo para verificación
            with open(output_file, "r") as f:
                content = f.read().strip()
                log.info("🔍 [RECON] Contenido del archivo subdomains.txt: %s", content)
                log.info("🔍 [RECON] Contenido del archivo (repr): %s", repr(content))
        else:
            log.error("🔍 [RECON] ❌ Error: El archivo %s no se creó", output_file)
            
    except Exception as e:
        log.error("🔍 [RECON] ❌ Error al escribir archivo %s: %s", output_file, e)
        raise ReconError(f"Error al escribir archivo de subdominios: {e}")
    
    log.info("🔍 [RECON] ✅ Reconocimiento completado. %d subdominios guardados en %s", len(subdomains), output_file)
    return output_file

# Helper functions for running tools
def run_subfinder(domain: str) -> List[str]:
    log.info("🔧 [SUBFINDER] Ejecutando subfinder para %s", domain)
    try:
        # Primero verificar si subfinder está disponible
        version_cmd = ["subfinder", "-version"]
        log.info("🔧 [SUBFINDER] Verificando disponibilidad con comando: %s", " ".join(version_cmd))
        version_output = run_cmd(version_cmd, ignore=True, timeout=10)
        log.info("🔧 [SUBFINDER] Versión de subfinder: %s", version_output.strip())
        log.info("🔧 [SUBFINDER] ✅ Subfinder está disponible")
    except Exception as e:
        log.error("🔧 [SUBFINDER] ❌ Error al verificar la versión de subfinder: %s", e)
        log.error("🔧 [SUBFINDER] ❌ Subfinder no está disponible o no funciona correctamente")
        return []

    try:
        subfinder_cmd = [
            "subfinder", "-d", domain, "-silent", "-o", "/dev/stdout",
            "-timeout", "30",  # Timeout por consulta DNS
            "-rate-limit", "10",  # Limitar rate para evitar bloqueos
            "-max-time", "180"  # Tiempo máximo total
        ]
        log.info("🔧 [SUBFINDER] Ejecutando comando: %s", " ".join(subfinder_cmd))
        subfinder_output = run_cmd(subfinder_cmd, timeout=120)
        log.info("🔧 [SUBFINDER] Salida cruda (primeros 500 chars): %s", subfinder_output[:500])
        
        if subfinder_output:
            found = [line.strip() for line in subfinder_output.split("\n") if line.strip()]
            log.info("🔧 [SUBFINDER] ✅ Subfinder encontró %d subdominios", len(found))
            if found:
                log.info("🔧 [SUBFINDER] Primeros 5 subdominios: %s", found[:5])
            return found
        else:
            log.warning("🔧 [SUBFINDER] ⚠️ Subfinder no devolvió ninguna salida.")
            return []
    except Exception as e:
        log.error("🔧 [SUBFINDER] ❌ Error ejecutando subfinder: %s", e)
        log.error("🔧 [SUBFINDER] ❌ Tipo de error: %s", type(e).__name__)
        return []

def run_amass(domain: str, *, brute: bool = False) -> List[str]:
    """Amass ha sido deshabilitado debido a problemas de compatibilidad."""
    log.warning("🔧 [AMASS] ⚠️ Amass deshabilitado para %s - usando solo subfinder", domain)
    return []