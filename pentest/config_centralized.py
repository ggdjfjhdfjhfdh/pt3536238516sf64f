#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Configuración centralizada mejorada para el sistema de pentest.
Unifica todas las configuraciones en un solo lugar con validación y tipado.
"""

import os
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, List, Optional, Union


@dataclass
class RedisConfig:
    """Configuración de Redis."""
    url: str = "redis://localhost:6379/0"
    timeout: int = 30
    max_connections: int = 10
    
    def __post_init__(self):
        # Usar variable de entorno si está disponible
        if "REDIS_URL" in os.environ:
            self.url = os.environ["REDIS_URL"]


@dataclass
class SecurityConfig:
    """Configuración de seguridad."""
    safe_domains: List[str] = field(default_factory=lambda: [
        "localhost", "127.0.0.1", "::1", "0.0.0.0"
    ])
    max_scan_time: int = 3600  # 1 hora máximo por escaneo
    rate_limit_requests: int = 100
    rate_limit_window: int = 60  # segundos
    

@dataclass
class TimeoutConfig:
    """Configuración de timeouts."""
    http_timeout: int = 30
    hibp_timeout: int = 60
    amass_timeout: int = 1800  # 30 minutos
    nuclei_timeout: int = 3600  # 1 hora
    nmap_timeout: int = 1800   # 30 minutos
    pdf_generation_timeout: int = 300  # 5 minutos


@dataclass
class WAFEvasionConfig:
    """Configuración para evasión de WAF."""
    max_requests_per_minute: int = 30
    delay_between_requests: float = 2.0
    timeout: int = 30
    max_retries: int = 3
    
    user_agents: List[str] = field(default_factory=lambda: [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0"
    ])
    
    common_headers: Dict[str, str] = field(default_factory=lambda: {
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate",
        "DNT": "1",
        "Connection": "keep-alive",
        "Upgrade-Insecure-Requests": "1"
    })


@dataclass
class EmailConfig:
    """Configuración de correo electrónico."""
    sender: str = "security@pentest-express.com"
    smtp_server: Optional[str] = None
    smtp_port: int = 587
    smtp_username: Optional[str] = None
    smtp_password: Optional[str] = None
    use_tls: bool = True
    
    def __post_init__(self):
        # Cargar desde variables de entorno
        self.smtp_server = os.getenv("SMTP_SERVER", self.smtp_server)
        self.smtp_username = os.getenv("SMTP_USERNAME", self.smtp_username)
        self.smtp_password = os.getenv("SMTP_PASSWORD", self.smtp_password)


@dataclass
class ReportConfig:
    """Configuración del sistema de reportes."""
    # Rutas de plantillas
    template_paths: List[str] = field(default_factory=lambda: [
        "/app/templates",
        "/app/pentest/templates",
        "templates",
        "./templates",
        "./pentest/templates"
    ])
    template_name: str = "report_enhanced.html"
    
    # Configuración de Jinja2
    autoescape_extensions: List[str] = field(default_factory=lambda: ['html', 'xml'])
    enable_cache: bool = True
    
    # Configuración de PDF
    pdf_timeout: int = 300
    pdf_quality: str = "high"
    pdf_margin: str = "2cm"
    
    # Configuración de datos
    validate_input: bool = True
    enable_correlation: bool = True
    enable_advanced_analytics: bool = True
    
    # Configuración de scoring
    severity_weights: Dict[str, int] = field(default_factory=lambda: {
        "critical": 5,
        "high": 4,
        "medium": 3,
        "low": 2,
        "info": 1
    })
    
    # Configuración de visualizaciones
    enable_charts: bool = True
    chart_theme: str = "dark"
    max_chart_items: int = 20


@dataclass
class ScanConfig:
    """Configuración de escaneos."""
    # Nuclei
    nuclei_templates_path: Optional[str] = None
    nuclei_concurrency: int = 25
    nuclei_rate_limit: int = 150
    nuclei_severity_filter: List[str] = field(default_factory=lambda: ["critical", "high", "medium", "low"])
    
    # Nmap
    nmap_top_ports: int = 1000
    nmap_timing: str = "T4"
    nmap_scripts: List[str] = field(default_factory=lambda: [
        "default", "vuln", "safe"
    ])
    
    # Subdomain enumeration
    max_subdomains: int = 1000
    subdomain_sources: List[str] = field(default_factory=lambda: [
        "amass", "subfinder", "assetfinder"
    ])
    
    # Directory bruteforcing
    dir_wordlist_size: str = "medium"  # small, medium, large
    dir_threads: int = 10
    dir_extensions: List[str] = field(default_factory=lambda: [
        "php", "asp", "aspx", "jsp", "html", "js", "txt", "xml", "json"
    ])


@dataclass
class MLConfig:
    """Configuración de Machine Learning."""
    enable_ml_analysis: bool = True
    model_path: Optional[str] = None
    confidence_threshold: float = 0.7
    max_predictions: int = 100
    
    # Configuración por ambiente
    environments: Dict[str, Dict] = field(default_factory=lambda: {
        "development": {
            "enable_advanced_models": False,
            "cache_predictions": False
        },
        "production": {
            "enable_advanced_models": True,
            "cache_predictions": True
        }
    })


@dataclass
class LoggingConfig:
    """Configuración de logging."""
    level: str = "INFO"
    format: str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    file_path: Optional[str] = None
    max_file_size: int = 10 * 1024 * 1024  # 10MB
    backup_count: int = 5
    enable_console: bool = True
    enable_file: bool = True


@dataclass
class CacheConfig:
    """Configuración de cache."""
    enable_cache: bool = True
    cache_ttl: int = 3600  # 1 hora
    max_cache_size: int = 1000
    cache_backend: str = "redis"  # redis, memory, file


@dataclass
class APIConfig:
    """Configuración de APIs externas."""
    # VirusTotal
    virustotal_api_key: Optional[str] = None
    virustotal_rate_limit: int = 4  # requests per minute
    
    # Shodan
    shodan_api_key: Optional[str] = None
    shodan_rate_limit: int = 1  # requests per second
    
    # Have I Been Pwned
    hibp_api_key: Optional[str] = None
    hibp_rate_limit: int = 1  # requests per 1.5 seconds
    
    # GreyNoise
    greynoise_api_key: Optional[str] = None
    greynoise_rate_limit: int = 10  # requests per minute
    
    def __post_init__(self):
        # Cargar desde variables de entorno
        self.virustotal_api_key = os.getenv("VIRUSTOTAL_API_KEY", self.virustotal_api_key)
        self.shodan_api_key = os.getenv("SHODAN_API_KEY", self.shodan_api_key)
        self.hibp_api_key = os.getenv("HIBP_API_KEY", self.hibp_api_key)
        self.greynoise_api_key = os.getenv("GREYNOISE_API_KEY", self.greynoise_api_key)


@dataclass
class CentralizedConfig:
    """Configuración centralizada principal."""
    
    # Configuraciones de componentes
    redis: RedisConfig = field(default_factory=RedisConfig)
    security: SecurityConfig = field(default_factory=SecurityConfig)
    timeouts: TimeoutConfig = field(default_factory=TimeoutConfig)
    waf_evasion: WAFEvasionConfig = field(default_factory=WAFEvasionConfig)
    email: EmailConfig = field(default_factory=EmailConfig)
    report: ReportConfig = field(default_factory=ReportConfig)
    scan: ScanConfig = field(default_factory=ScanConfig)
    ml: MLConfig = field(default_factory=MLConfig)
    logging: LoggingConfig = field(default_factory=LoggingConfig)
    cache: CacheConfig = field(default_factory=CacheConfig)
    api: APIConfig = field(default_factory=APIConfig)
    
    # Configuración general
    environment: str = "development"
    debug: bool = False
    version: str = "2.0.0"
    
    # Rutas
    base_dir: Path = field(default_factory=lambda: Path.cwd())
    temp_dir: Path = field(default_factory=lambda: Path("/tmp"))
    data_dir: Path = field(default_factory=lambda: Path("./data"))
    logs_dir: Path = field(default_factory=lambda: Path("./logs"))
    
    def __post_init__(self):
        # Configurar ambiente desde variable de entorno
        self.environment = os.getenv("ENVIRONMENT", self.environment)
        self.debug = os.getenv("DEBUG", "false").lower() == "true"
        
        # Ajustar configuraciones basadas en el ambiente
        if self.environment == "production":
            self.debug = False
            self.logging.level = "WARNING"
            self.cache.enable_cache = True
            self.report.enable_advanced_analytics = True
        elif self.environment == "development":
            self.debug = True
            self.logging.level = "DEBUG"
            self.cache.enable_cache = False
        
        # Crear directorios si no existen
        for directory in [self.temp_dir, self.data_dir, self.logs_dir]:
            directory.mkdir(parents=True, exist_ok=True)
    
    def get_template_paths(self) -> List[str]:
        """Obtiene las rutas de plantillas con rutas absolutas."""
        paths = []
        for path_str in self.report.template_paths:
            path = Path(path_str)
            if not path.is_absolute():
                path = self.base_dir / path
            paths.append(str(path.absolute()))
        return paths
    
    def validate(self) -> List[str]:
        """Valida la configuración y retorna una lista de errores."""
        errors = []
        
        # Validar rutas críticas
        if not any(Path(p).exists() for p in self.get_template_paths()):
            errors.append("No se encontraron rutas de plantillas válidas")
        
        # Validar configuración de email si está habilitada
        if self.email.smtp_server and not self.email.smtp_username:
            errors.append("SMTP configurado pero falta username")
        
        # Validar timeouts
        if self.timeouts.http_timeout <= 0:
            errors.append("HTTP timeout debe ser mayor a 0")
        
        # Validar configuración de ML
        if self.ml.enable_ml_analysis and not self.ml.model_path:
            errors.append("ML habilitado pero no se especificó ruta del modelo")
        
        return errors
    
    def to_dict(self) -> Dict:
        """Convierte la configuración a diccionario para serialización."""
        import dataclasses
        return dataclasses.asdict(self)
    
    @classmethod
    def from_file(cls, config_path: Union[str, Path]) -> 'CentralizedConfig':
        """Carga configuración desde archivo YAML o JSON."""
        import yaml
        import json
        
        config_path = Path(config_path)
        if not config_path.exists():
            raise FileNotFoundError(f"Archivo de configuración no encontrado: {config_path}")
        
        with open(config_path, 'r', encoding='utf-8') as f:
            if config_path.suffix.lower() in ['.yaml', '.yml']:
                data = yaml.safe_load(f)
            elif config_path.suffix.lower() == '.json':
                data = json.load(f)
            else:
                raise ValueError(f"Formato de archivo no soportado: {config_path.suffix}")
        
        return cls(**data)
    
    def save_to_file(self, config_path: Union[str, Path], format: str = "yaml") -> None:
        """Guarda la configuración a archivo."""
        import yaml
        import json
        
        config_path = Path(config_path)
        data = self.to_dict()
        
        with open(config_path, 'w', encoding='utf-8') as f:
            if format.lower() in ['yaml', 'yml']:
                yaml.dump(data, f, default_flow_style=False, allow_unicode=True)
            elif format.lower() == 'json':
                json.dump(data, f, indent=2, ensure_ascii=False)
            else:
                raise ValueError(f"Formato no soportado: {format}")


# ============================================================================
# INSTANCIA GLOBAL Y FUNCIONES DE UTILIDAD
# ============================================================================

# Instancia global de configuración
_config_instance: Optional[CentralizedConfig] = None


def get_config() -> CentralizedConfig:
    """Obtiene la instancia global de configuración (Singleton)."""
    global _config_instance
    if _config_instance is None:
        _config_instance = CentralizedConfig()
    return _config_instance


def set_config(config: CentralizedConfig) -> None:
    """Establece la instancia global de configuración."""
    global _config_instance
    _config_instance = config


def load_config_from_file(config_path: Union[str, Path]) -> CentralizedConfig:
    """Carga y establece configuración desde archivo."""
    config = CentralizedConfig.from_file(config_path)
    set_config(config)
    return config


def reset_config() -> None:
    """Resetea la configuración a valores por defecto."""
    global _config_instance
    _config_instance = None


# ============================================================================
# FUNCIONES DE COMPATIBILIDAD
# ============================================================================

def generate_common_emails(domain: str) -> List[str]:
    """Genera lista de emails comunes para un dominio (compatibilidad)."""
    prefixes = [
        "admin", "administrator", "info", "contact", "support", "help",
        "sales", "marketing", "hr", "finance", "security", "webmaster",
        "postmaster", "noreply", "no-reply", "mail", "email", "test"
    ]
    return [f"{prefix}@{domain}" for prefix in prefixes]


# Variables de compatibilidad con config.py original
REDIS_URL = get_config().redis.url
SAFE_DOMAINS = get_config().security.safe_domains
HTTP_TIMEOUT = get_config().timeouts.http_timeout
HIBP_TIMEOUT = get_config().timeouts.hibp_timeout
AMASS_TIMEOUT = get_config().timeouts.amass_timeout
MAX_REQUESTS_PER_MINUTE = get_config().waf_evasion.max_requests_per_minute
DELAY_BETWEEN_REQUESTS = get_config().waf_evasion.delay_between_requests
WAF_TIMEOUT = get_config().waf_evasion.timeout
MAX_RETRIES = get_config().waf_evasion.max_retries
USER_AGENTS = get_config().waf_evasion.user_agents
COMMON_HEADERS = get_config().waf_evasion.common_headers
TEMPLATE_DIR = get_config().get_template_paths()[0] if get_config().get_template_paths() else "templates"
USER_AGENT = get_config().waf_evasion.user_agents[0] if get_config().waf_evasion.user_agents else "PentestExpress/1.0"
EMAIL_SENDER = get_config().email.sender