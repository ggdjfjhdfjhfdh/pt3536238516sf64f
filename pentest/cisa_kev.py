import requests
import json
import logging
from datetime import datetime

log = logging.getLogger("pentest")

CISA_KEV_URL = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"

def download_cisa_kev_list():
    """Descarga la lista de CISA KEV."""
    try:
        response = requests.get(CISA_KEV_URL)
        response.raise_for_status()  # Raise an HTTPError for bad responses (4xx or 5xx)
        return response.json()
    except requests.exceptions.RequestException as e:
        log.error(f"Error al descargar la lista de CISA KEV: {e}")
        return None

def filter_cisa_kev_by_tech(cisa_kev_list: dict, tech_stack: list) -> list:
    """Filtra la lista de CISA KEV por tecnologÃ­a detectada."""
    if not cisa_kev_list or not tech_stack:
        return []

    filtered_vulnerabilities = []
    for vulnerability in cisa_kev_list.get("vulnerabilities", []):
        vendor_product = vulnerability.get("vendorProduct", "").lower()
        for tech in tech_stack:
            if tech.lower() in vendor_product:
                filtered_vulnerabilities.append(vulnerability)
                break
    return filtered_vulnerabilities

def cisa_kev_monitor(tech_stack: list) -> list:
    """Monitoriza CISA KEV y alerta sobre vulnerabilidades relevantes."""
    log.info("Iniciando monitorizaciÃ³n de CISA KEV...")
    kev_list = download_cisa_kev_list()
    if kev_list:
        relevant_vulnerabilities = filter_cisa_kev_by_tech(kev_list, tech_stack)
        if relevant_vulnerabilities:
            log.warning("ğŸš¨ Â¡Alerta! Se encontraron vulnerabilidades de CISA KEV relevantes para la tecnologÃ­a detectada:")
            for vul in relevant_vulnerabilities:
                log.warning(f"  - CVE ID: {vul.get('cveID')}, Vendor/Product: {vul.get('vendorProduct')}, Due Date: {vul.get('dueDate')}")
            return relevant_vulnerabilities
        else:
            log.info("No se encontraron vulnerabilidades de CISA KEV relevantes para la tecnologÃ­a detectada.")
    return []