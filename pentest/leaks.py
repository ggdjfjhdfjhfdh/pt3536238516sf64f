"""Módulo para búsqueda de credenciales filtradas."""

import json
import logging
import os
from pathlib import Path
from typing import Dict, List, Any, Optional

from pentest.http import get_session
from pentest.exceptions import LeaksError
from pentest.config import get_common_emails, HIBP_REQUEST_TIMEOUT

# Configuración de logging
log = logging.getLogger(__name__)

def check_hibp_email(email: str, api_key: str) -> List[Dict[str, Any]]:
    """Comprueba si un email ha sido comprometido según Have I Been Pwned.
    
    Args:
        email: Dirección de correo a comprobar
        api_key: Clave API para Have I Been Pwned
        
    Returns:
        Lista de brechas en las que aparece el email
    """
    url = f"https://haveibeenpwned.com/api/v3/breachedaccount/{email}"
    headers = {
        "hibp-api-key": api_key,
        "user-agent": "PentestExpress/2.0"
    }
    
    session = get_session()
    response = session.get(url, headers=headers, timeout=HIBP_REQUEST_TIMEOUT)
    
    if response.status_code == 404:
        return []  # No breaches
    
    response.raise_for_status()
    return response.json()  # lista de brechas

def check_leaks(domain: str, tmp_dir: Path, api_key: Optional[str] = None) -> Path:
    """Busca credenciales filtradas para correos comunes del dominio.
    
    Args:
        domain: Dominio objetivo
        tmp_dir: Directorio temporal para almacenar resultados
        api_key: Clave API para Have I Been Pwned (opcional)
        
    Returns:
        Path al archivo JSON con los resultados de la búsqueda
        
    Raises:
        LeaksError: Si falla la búsqueda de credenciales filtradas
    """
    log.info("🔍 Iniciando búsqueda de credenciales filtradas para %s", domain)
    
    output_file = tmp_dir / "leaks.json"
    
    # Obtener clave API de variable de entorno si no se proporciona
    if not api_key:
        api_key = os.getenv("HIBP_API_KEY")
    
    if not api_key:
        log.info("No se ha proporcionado clave API para Have I Been Pwned. Se omitirá la comprobación de HIBP.")
        # Crear un archivo de resultados vacío
        with open(output_file, "w") as f:
            json.dump([], f)
        return output_file
    
    # Generar lista de correos comunes
    emails = get_common_emails(domain)
    log.info("Comprobando %d correos electrónicos comunes", len(emails))
    
    # Resultados
    results = []
    
    # Comprobar cada correo
    for email in emails:
        try:
            log.debug("Comprobando email: %s", email)
            breaches = check_hibp_email(email, api_key)
            
            if breaches:
                # Determinar severidad según número de brechas
                severity = "low"
                if len(breaches) >= 5:
                    severity = "medium"
                if len(breaches) >= 10:
                    severity = "high"
                
                # Añadir resultado
                results.append({
                    "email": email,
                    "breaches": breaches,
                    "count": len(breaches),
                    "severity": severity
                })
                
                log.info("Email %s encontrado en %d brechas", email, len(breaches))
        except Exception as e:
            log.warning("Error al comprobar email %s: %s", email, str(e))
    
    # Guardar resultados
    with open(output_file, "w") as f:
        json.dump(results, f, indent=2)
    
    log.info("✅ Búsqueda de credenciales completada: %d emails comprometidos", len(results))
    return output_file