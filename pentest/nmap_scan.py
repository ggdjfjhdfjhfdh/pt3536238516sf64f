import json
import logging
from pathlib import Path
from typing import List, Dict, Any

from pentest.runners import run_cmd
from pentest.exceptions import NmapScanError
from pentest.config import DEFAULT_TIMEOUT

log = logging.getLogger(__name__)

def nmap_scan(httpx_file: Path, tmp_dir: Path) -> Path:
    """Performs port and service scanning using Nmap on active hosts.
    
    Args:
        httpx_file: Path to the JSON file containing httpx results (active hosts).
        tmp_dir: Temporary directory for storing results.
        
    Returns:
        Path to the JSON file with Nmap findings.
        
    Raises:
        NmapScanError: If the Nmap scan fails.
    """
    log.info("üîç Iniciando escaneo de puertos y servicios con Nmap.")
    
    output_file = tmp_dir / "nmap.json"
    nmap_findings: List[Dict[str, Any]] = []

    if not httpx_file.exists():
        log.warning(f"Archivo httpx no encontrado: {httpx_file}. No se realizar√° escaneo con Nmap.")
        with open(output_file, "w") as f:
            json.dump([], f)
        return output_file

    try:
        with open(httpx_file, "r") as f:
            httpx_data = json.load(f)

        for host_data in httpx_data:
            host = host_data.get("host")
            url = host_data.get("url")

            if not host:
                continue

            log.info(f"Escaneando puertos para {host}...")
            # Basic Nmap scan for common ports and service version detection
            nmap_cmd = [
                "nmap",
                "-sV", # Service version detection
                "-p", "21,22,23,25,53,80,110,139,143,443,445,3306,3389,8080,8443", # Common ports
                "--open", # Only show open ports
                "-oX", "-", # Output in XML to stdout
                host
            ]

            try:
                nmap_output = run_cmd(nmap_cmd, timeout=DEFAULT_TIMEOUT * 3, ignore=True) # Increased timeout
                # Parse Nmap XML output (simplified for demonstration)
                # In a real scenario, you'd use an XML parser like ElementTree
                if "<portid" in nmap_output:
                    # Simple parsing to extract open ports and services
                    # This is a placeholder and should be replaced with robust XML parsing
                    for line in nmap_output.splitlines():
                        if "<portid" in line and "state=\"open\"" in line:
                            port_id = line.split('portid="')[1].split('"')[0]
                            service_name = "Unknown"
                            if "service name=\"" in line:
                                service_name = line.split('service name="')[1].split('"')[0]
                            nmap_findings.append({
                                "host": host,
                                "url": url,
                                "port": port_id,
                                "service": service_name,
                                "status": "open"
                            })
            except Exception as e:
                log.warning(f"Nmap scan failed for {host}: {str(e)}")

        with open(output_file, "w") as f:
            json.dump(nmap_findings, f, indent=2)

        log.info("‚úÖ Escaneo de puertos y servicios completado: %d hallazgos", len(nmap_findings))
        return output_file

    except Exception as e:
        raise NmapScanError(f"Error durante el escaneo de Nmap: {str(e)}") from e