import json
import logging
import json
import xml.etree.ElementTree as ET
from pathlib import Path
from typing import List, Dict, Any

from pentest.runners import run_cmd
from pentest.exceptions import ScanError
from pentest.config import DEFAULT_TIMEOUT

log = logging.getLogger(__name__)

def nmap_scan(httpx_file: Path, tmp_dir: Path, full_scan: bool = False) -> Path:
    """Performs port and service scanning using Nmap on active hosts.
    
    Args:
        httpx_file: Path to the JSON file containing httpx results (active hosts).
        tmp_dir: Temporary directory for storing results.
        full_scan: If True, performs a more exhaustive scan (all ports, default scripts).
        
    Returns:
        Path to the JSON file with Nmap findings.
        
    Raises:
        NmapScanError: If the Nmap scan fails.
    """
    log.info("üîç Iniciando escaneo de puertos y servicios con Nmap.")
    
    output_file = tmp_dir / "nmap.json"
    nmap_findings: List[Dict[str, Any]] = []

    if not httpx_file.exists():
        log.warning(f"Archivo httpx no encontrado: {httpx_file}. No se realizar√° escaneo con Nmap.")
        with open(output_file, "w") as f:
            json.dump([], f)
        return output_file

    try:
        with open(httpx_file, "r") as f:
            httpx_data = json.load(f)

        for host_data in httpx_data:
            host = host_data.get("host")
            url = host_data.get("url")

            if not host:
                continue

            log.info(f"Escaneando puertos para {host}...")
            
            nmap_cmd = [
                "nmap",
                "-sV", # Service version detection
                "-oX", "-", # Output in XML to stdout
                host
            ]
            log.debug(f"Comando Nmap a ejecutar: {' '.join(nmap_cmd)}")

            if full_scan:
                nmap_cmd.extend(["-p-", "-sC"]) # Scan all ports, run default scripts
                log.info(f"Realizando escaneo completo de Nmap para {host}...")
            else:
                nmap_cmd.extend(["-p", "21,22,23,25,53,80,110,139,143,443,445,3306,3389,8080,8443"]) # Common ports
                log.info(f"Realizando escaneo de puertos comunes para {host}...")
            
            nmap_cmd.append("--open") # Only show open ports

            try:
                nmap_output = run_cmd(nmap_cmd, timeout=DEFAULT_TIMEOUT * 5, ignore=True) # Increased timeout for full scan
                log.debug(f"Salida cruda de Nmap para {host}:\n{nmap_output}")
                
                root = ET.fromstring(nmap_output)
                for host_elem in root.findall('host'):
                    address = host_elem.find('address').get('addr')
                    for port_elem in host_elem.findall('ports/port'):
                        port_id = port_elem.get('portid')
                        protocol = port_elem.get('protocol')
                        state_elem = port_elem.find('state')
                        state = state_elem.get('state') if state_elem is not None else 'unknown'
                        
                        service_elem = port_elem.find('service')
                        service_name = service_elem.get('name') if service_elem is not None else 'unknown'
                        product = service_elem.get('product') if service_elem is not None else ''
                        version = service_elem.get('version') if service_elem is not None else ''
                        extrainfo = service_elem.get('extrainfo') if service_elem is not None else ''

                        if state == "open":
                            nmap_findings.append({
                                "host": address,
                                "url": url, # Keep original URL for context
                                "port": port_id,
                                "protocol": protocol,
                                "service": service_name,
                                "product": product,
                                "version": version,
                                "extrainfo": extrainfo,
                                "status": state
                            })
            except ET.ParseError as e:
                log.warning(f"Error al parsear la salida XML de Nmap para {host}: {e}", exc_info=True)
            except Exception as e:
                log.warning(f"Nmap scan failed for {host}: {str(e)}")

        with open(output_file, "w") as f:
            json.dump(nmap_findings, f, indent=2)

        log.info("‚úÖ Escaneo de puertos y servicios completado: %d hallazgos", len(nmap_findings))
        return output_file

    except Exception as e:
        log.error(f"Error during Nmap scan: {e}")
        raise ScanError(f"Error during Nmap scan: {e}") from e