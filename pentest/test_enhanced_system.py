#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Prueba del Sistema Mejorado de Detecci√≥n de Tecnolog√≠as
Este script verifica que todas las funcionalidades est√©n operativas.
"""

import sys
import json
import time
import logging
from pathlib import Path
from typing import Dict, List

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
log = logging.getLogger(__name__)

def test_web_content_analyzer():
    """Prueba el analizador de contenido web."""
    print("\n=== PRUEBA: Analizador de Contenido Web ===")
    
    try:
        from web_content_analyzer import WebContentAnalyzer
        
        analyzer = WebContentAnalyzer(timeout=15)
        
        # HTML de prueba con tecnolog√≠as conocidas
        test_html = '''
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="generator" content="WordPress 5.8.1">
            <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        </head>
        <body>
            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        <button class="btn btn-primary">Test</button>
                    </div>
                </div>
            </div>
            <script>
                $(document).ready(function() {
                    console.log('jQuery loaded');
                });
            </script>
        </body>
        </html>
        '''
        
        results = analyzer.analyze_content(html_content=test_html)
        
        print(f"‚úÖ Tecnolog√≠as detectadas en HTML: {len(results['html'])}")
        for tech in results['html']:
            version_str = f" v{tech.version}" if tech.version else ""
            print(f"   - {tech.name}{version_str} (confianza: {tech.confidence:.2f})")
        
        print(f"‚úÖ Resumen consolidado: {len(results['summary'])} tecnolog√≠as")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en analizador de contenido web: {e}")
        return False

def test_enhanced_fingerprint():
    """Prueba el detector mejorado."""
    print("\n=== PRUEBA: Detector Mejorado ===")
    
    try:
        from enhanced_fingerprint import EnhancedTechDetector
        
        detector = EnhancedTechDetector(
            enable_web_content_analysis=True,
            use_cache=False  # Deshabilitar cache para prueba
        )
        
        # Probar con un dominio conocido
        test_domain = "example.com"
        
        print(f"Analizando: {test_domain}")
        start_time = time.time()
        
        results = detector.detect_technologies(test_domain)
        
        end_time = time.time()
        duration = end_time - start_time
        
        if results and results.get('technologies'):
            print(f"‚úÖ Detecci√≥n completada en {duration:.2f}s")
            print(f"‚úÖ Tecnolog√≠as detectadas: {len(results['technologies'])}")
            print(f"‚úÖ Herramientas exitosas: {', '.join(results.get('successful_tools', []))}")
            
            # Mostrar algunas tecnolog√≠as detectadas
            for i, tech in enumerate(results['technologies'][:5]):
                version_str = f" v{tech.get('version', '')}" if tech.get('version') else ""
                confidence = tech.get('confidence', 0)
                source = tech.get('source', 'unknown')
                print(f"   {i+1}. {tech['name']}{version_str} (confianza: {confidence}%, fuente: {source})")
            
            if len(results['technologies']) > 5:
                print(f"   ... y {len(results['technologies']) - 5} m√°s")
            
            return True
        else:
            print("‚ö†Ô∏è No se detectaron tecnolog√≠as")
            return False
        
    except Exception as e:
        print(f"‚ùå Error en detector mejorado: {e}")
        return False

def test_tech_mapping():
    """Prueba el mapeador de tecnolog√≠as."""
    print("\n=== PRUEBA: Mapeador de Tecnolog√≠as ===")
    
    try:
        from tech_mapping import TechMapper
        
        mapper = TechMapper()
        
        # Probar mapeo de tecnolog√≠as conocidas
        test_technologies = [
            {'name': 'WordPress', 'version': '5.8.1'},
            {'name': 'Apache', 'version': '2.4.41'},
            {'name': 'PHP', 'version': '7.4.3'},
            {'name': 'jQuery', 'version': '3.6.0'}
        ]
        
        print("Probando mapeo de tecnolog√≠as...")
        
        for tech in test_technologies:
            nuclei_templates = mapper.get_nuclei_templates(tech['name'])
            security_analysis = mapper.analyze_security_implications(tech)
            
            print(f"‚úÖ {tech['name']} v{tech['version']}:")
            print(f"   - Plantillas Nuclei: {len(nuclei_templates)}")
            print(f"   - Nivel de riesgo: {security_analysis.get('risk_level', 'unknown')}")
            
            if security_analysis.get('vulnerabilities'):
                print(f"   - Vulnerabilidades potenciales: {len(security_analysis['vulnerabilities'])}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en mapeador de tecnolog√≠as: {e}")
        return False

def test_metrics_system():
    """Prueba el sistema de m√©tricas."""
    print("\n=== PRUEBA: Sistema de M√©tricas ===")
    
    try:
        from metrics import TechDetectionMetrics
        
        metrics = TechDetectionMetrics()
        
        # Simular algunas detecciones
        test_data = [
            ('example.com', 'wappalyzer', 5, 2.5, True, None),
            ('test.com', 'whatweb', 3, 1.8, True, None),
            ('demo.com', 'web_content', 8, 3.2, True, None),
            ('fail.com', 'wappalyzer', 0, 5.0, False, 'Timeout')
        ]
        
        print("Registrando m√©tricas de prueba...")
        
        for target, tool, count, duration, success, error in test_data:
            metrics.record_detection(target, tool, count, duration, success, error)
            print(f"‚úÖ Registrado: {tool} en {target} - {count} tecnolog√≠as")
        
        # Generar reporte
        report = metrics.get_performance_report()
        
        print(f"\nüìä Reporte de rendimiento:")
        print(f"   - Total detecciones: {report.get('total_detections', 0)}")
        print(f"   - Tasa de √©xito: {report.get('success_rate', 0):.1f}%")
        print(f"   - Tiempo promedio: {report.get('average_duration', 0):.2f}s")
        print(f"   - Tecnolog√≠as promedio: {report.get('average_technologies', 0):.1f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en sistema de m√©tricas: {e}")
        return False

def test_enhanced_integration():
    """Prueba la integraci√≥n completa."""
    print("\n=== PRUEBA: Integraci√≥n Completa ===")
    
    try:
        from enhanced_integration import EnhancedTechIntegrator
        
        integrator = EnhancedTechIntegrator(
            enable_fallback=True,
            enable_web_content_analysis=True
        )
        
        print(f"‚úÖ Integrador inicializado: {integrator.is_available()}")
        
        if integrator.is_available():
            # Obtener estado del sistema
            status = integrator.get_system_status()
            
            print(f"üìä Estado del sistema:")
            print(f"   - Detector disponible: {status.get('detector_available', False)}")
            print(f"   - Mapeador disponible: {status.get('mapper_available', False)}")
            print(f"   - M√©tricas disponibles: {status.get('metrics_available', False)}")
            print(f"   - Validador disponible: {status.get('validator_available', False)}")
            print(f"   - An√°lisis web habilitado: {status.get('web_content_analysis_enabled', False)}")
            
            # Probar detecci√≥n
            print(f"\nüîç Probando detecci√≥n integrada...")
            result = integrator.detect_technologies("httpbin.org")
            
            if result and result.get('technologies'):
                print(f"‚úÖ Detecci√≥n exitosa: {len(result['technologies'])} tecnolog√≠as")
                print(f"‚úÖ Herramientas usadas: {', '.join(result.get('tools_used', []))}")
                return True
            else:
                print("‚ö†Ô∏è Detecci√≥n sin resultados")
                return False
        else:
            print("‚ùå Integrador no disponible")
            return False
        
    except Exception as e:
        print(f"‚ùå Error en integraci√≥n completa: {e}")
        return False

def test_tool_validator():
    """Prueba el validador de herramientas."""
    print("\n=== PRUEBA: Validador de Herramientas ===")
    
    try:
        from tool_validator import ExternalToolValidator
        
        validator = ExternalToolValidator(timeout=10)
        
        print("Validando herramientas externas...")
        
        tools_info = validator.validate_all_tools()
        available_tools = validator.get_available_tools()
        
        print(f"‚úÖ Herramientas disponibles: {len(available_tools)}")
        
        for tool in available_tools:
            info = tools_info.get(tool)
            if info and hasattr(info, 'version'):
                version = info.version or 'unknown'
            else:
                version = 'unknown'
            print(f"   - {tool}: {version}")
        
        if not available_tools:
            print("‚ö†Ô∏è No hay herramientas externas disponibles")
            print("   El sistema funcionar√° solo con detecci√≥n incorporada")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en validador de herramientas: {e}")
        return False

def run_all_tests():
    """Ejecuta todas las pruebas."""
    print("üöÄ INICIANDO PRUEBAS DEL SISTEMA MEJORADO")
    print("=" * 60)
    
    tests = [
        ("Analizador de Contenido Web", test_web_content_analyzer),
        ("Detector Mejorado", test_enhanced_fingerprint),
        ("Mapeador de Tecnolog√≠as", test_tech_mapping),
        ("Sistema de M√©tricas", test_metrics_system),
        ("Validador de Herramientas", test_tool_validator),
        ("Integraci√≥n Completa", test_enhanced_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå Error cr√≠tico en {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if success:
            passed += 1
    
    print(f"\nüìà Resultado: {passed}/{total} pruebas exitosas ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("\nüéâ ¬°TODAS LAS PRUEBAS EXITOSAS!")
        print("El sistema mejorado est√° completamente operativo.")
    elif passed >= total * 0.7:
        print("\n‚úÖ Sistema mayormente operativo")
        print("Algunas funcionalidades pueden tener limitaciones.")
    else:
        print("\n‚ö†Ô∏è Sistema con problemas")
        print("Se requiere revisi√≥n de la configuraci√≥n.")
    
    print("\nüí° Pr√≥ximos pasos:")
    print("1. Revisar logs para detalles de errores")
    print("2. Verificar configuraci√≥n en enhanced_detection_config.yaml")
    print("3. Instalar herramientas externas si es necesario")
    print("4. Ejecutar un escaneo real para validar funcionamiento")
    
    return passed == total

def main():
    """Funci√≥n principal."""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="Pruebas del sistema mejorado de detecci√≥n"
    )
    
    parser.add_argument(
        "--test",
        choices=["web", "fingerprint", "mapping", "metrics", "validator", "integration", "all"],
        default="all",
        help="Prueba espec√≠fica a ejecutar (default: all)"
    )
    
    args = parser.parse_args()
    
    # A√±adir directorio pentest al path
    pentest_dir = Path(__file__).parent
    if str(pentest_dir) not in sys.path:
        sys.path.insert(0, str(pentest_dir))
    
    try:
        if args.test == "all":
            success = run_all_tests()
        elif args.test == "web":
            success = test_web_content_analyzer()
        elif args.test == "fingerprint":
            success = test_enhanced_fingerprint()
        elif args.test == "mapping":
            success = test_tech_mapping()
        elif args.test == "metrics":
            success = test_metrics_system()
        elif args.test == "validator":
            success = test_tool_validator()
        elif args.test == "integration":
            success = test_enhanced_integration()
        
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print("\nPruebas interrumpidas por el usuario")
        sys.exit(1)
    except Exception as e:
        log.error(f"Error cr√≠tico: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()