import json
import logging
import requests
from urllib.parse import urljoin
from pathlib import Path
from typing import List, Dict, Any

from pentest.exceptions import SecurityConfigError
from pentest.config import DEFAULT_TIMEOUT

log = logging.getLogger(__name__)

def security_config_scan(httpx_file: Path, tmp_dir: Path) -> Path:
    """Performs basic security configuration analysis on identified web servers.
    
    Args:
        httpx_file: Path to the JSON file containing httpx results (active hosts with tech-detect).
        tmp_dir: Temporary directory for storing results.
        
    Returns:
        Path to the JSON file with security configuration findings.
        
    Raises:
        SecurityConfigError: If the security configuration scan fails.
    """
    log.info("üîç Iniciando an√°lisis de configuraci√≥n de seguridad.")
    
    output_file = tmp_dir / "security_config.json"
    config_findings: List[Dict[str, Any]] = []

    if not httpx_file.exists():
        log.warning(f"Archivo httpx no encontrado: {httpx_file}. No se realizar√° an√°lisis de configuraci√≥n de seguridad.")
        with open(output_file, "w") as f:
            json.dump([], f)
        return output_file

    try:
        with open(httpx_file, "r") as f:
            httpx_data = json.load(f)

        for host_data in httpx_data:
            url = host_data.get("url")
            technologies = host_data.get("tech", [])

            if not url:
                continue

            log.info(f"Analizando configuraci√≥n de seguridad para {url}...")

            # Placeholder for actual security configuration checks
            # This would involve more sophisticated checks, potentially using external tools
            # or custom HTTP requests to look for common misconfigurations.
            
            # Example: Check for common server headers that indicate misconfigurations
            # Realizar comprobaciones de cabeceras de seguridad
            config_findings.extend(check_security_headers(url))

            # Comprobaciones espec√≠ficas de tecnolog√≠as
            if "nginx" in [t.lower() if isinstance(t, str) else t.get("name", "").lower() for t in technologies]:
                # Ejemplo: Comprobar si la p√°gina de estado de Nginx est√° expuesta
                nginx_status_url = urljoin(url, "/nginx_status")
                try:
                    response = requests.get(nginx_status_url, timeout=5, verify=False)
                    if response.status_code == 200 and "Active connections" in response.text:
                        config_findings.append({
                            "url": nginx_status_url,
                            "type": "Misconfiguration",
                            "description": "P√°gina de estado de Nginx expuesta, revelando informaci√≥n sensible.",
                            "severity": "High"
                        })
                except requests.exceptions.RequestException as e:
                    log.debug(f"No se pudo acceder a {nginx_status_url}: {e}")

            if "apache http server" in [t.lower() if isinstance(t, str) else t.get("name", "").lower() for t in technologies]:
                # Ejemplo: Comprobar si la p√°gina de estado de Apache est√° expuesta
                apache_status_url = urljoin(url, "/server-status")
                try:
                    response = requests.get(apache_status_url, timeout=5, verify=False)
                    if response.status_code == 200 and "Apache Server Status" in response.text:
                        config_findings.append({
                            "url": apache_status_url,
                            "type": "Misconfiguration",
                            "description": "P√°gina de estado de Apache expuesta, revelando informaci√≥n sensible.",
                            "severity": "High"
                        })
                except requests.exceptions.RequestException as e:
                    log.debug(f"No se pudo acceder a {apache_status_url}: {e}")

            # A√±adir m√°s comprobaciones aqu√≠ para otras tecnolog√≠as o configuraciones comunes

        with open(output_file, "w") as f:
            json.dump(config_findings, f, indent=2)

        log.info("‚úÖ An√°lisis de configuraci√≥n de seguridad completado: %d hallazgos", len(config_findings))
        return output_file

    except Exception as e:
        raise SecurityConfigError(f"Error durante el an√°lisis de configuraci√≥n de seguridad: {str(e)}") from e

def check_security_headers(url: str) -> List[Dict[str, Any]]:
    findings = []
    try:
        response = requests.get(url, timeout=10, verify=False, allow_redirects=True)
        headers = {k.lower(): v for k, v in response.headers.items()}

        # Lista de cabeceras de seguridad recomendadas y su severidad si faltan
        security_headers = {
            "strict-transport-security": "High",
            "x-frame-options": "Medium",
            "content-security-policy": "Medium",
            "x-content-type-options": "Medium",
            "referrer-policy": "Medium",
            "permissions-policy": "Medium",
            "expect-ct": "Medium",
            "cross-origin-embedder-policy": "Medium",
            "cross-origin-opener-policy": "Medium",
            "cross-origin-resource-policy": "Medium",
        }

        for header, severity in security_headers.items():
            if header not in headers:
                findings.append({
                    "url": url,
                    "type": "Missing Security Header",
                    "description": f"La cabecera '{header}' no est√° presente.",
                    "severity": severity
                })

        # Comprobar la cabecera 'Server'
        server_header = headers.get("server")
        if server_header:
            findings.append({
                "url": url,
                "type": "Information Disclosure",
                "description": f"La cabecera 'Server' expone informaci√≥n sobre el servidor web: {server_header}.",
                "severity": "Low"
            })

    except requests.exceptions.RequestException as e:
        log.warning(f"No se pudo realizar la comprobaci√≥n de cabeceras para {url}: {e}")
    return findings