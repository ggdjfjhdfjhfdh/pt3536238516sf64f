"""Configuración centralizada para el escáner de seguridad."""

import os
import re
from pathlib import Path

# Configuración de 
REDIS_URL = os.getenv("REDIS_URL", "redis://red-d20a0bvgi27c73cbmk3g:6379")

# Validación de dominio
SAFE_DOMAIN = re.compile(r"^[a-z0-9.-]{3,253}$", re.I)

# Timeouts (en segundos)
DEFAULT_TIMEOUT = 300

HTTP_REQUEST_TIMEOUT = 10
HIBP_REQUEST_TIMEOUT = 10
AMASS_TIMEOUT = 600 # Aumentar el timeout para amass, ya que puede tardar mucho

# Configuración anti-WAF
WAF_EVASION_CONFIG = {
    "max_requests_per_domain": 10,  # Limitar peticiones por dominio
    "request_delay_min": 1,        # Delay mínimo entre peticiones (segundos)
    "request_delay_max": 3,        # Delay máximo entre peticiones (segundos)
    "connect_timeout": 10,         # Timeout de conexión
    "max_time": 20,               # Timeout máximo por petición
    "max_redirects": 3,           # Máximo número de redirecciones
    "retry_attempts": 1,          # Número de reintentos
    "retry_delay": 2,             # Delay entre reintentos
}

# User-Agents rotativos para evasión de WAF
WAF_USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/121.0",
    "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/121.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0"
]

# Headers comunes para evasión de WAF
WAF_COMMON_HEADERS = {
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
    "Accept-Language": "en-US,en;q=0.5",
    "Accept-Encoding": "gzip, deflate",
    "Cache-Control": "no-cache",
    "Pragma": "no-cache",
    "Sec-Fetch-Dest": "document",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-Site": "none",
    "Upgrade-Insecure-Requests": "1"
}

# Rutas
TEMPLATES_DIR = Path(os.path.dirname(os.path.dirname(__file__))) / "templates"

# Configuración de User-Agent (legacy)
USER_AGENT = "PentestExpress/2.0"

# Correo electrónico del remitente para notificaciones
MAIL_SENDER_EMAIL = os.getenv("MAIL_SENDER_EMAIL", "informes@auditatetumismo.es")
MAIL_SENDER_NAME = os.getenv("MAIL_SENDER_NAME", "Pentest Express")

# Correos comunes para verificar filtraciones
def get_common_emails(domain: str) -> list[str]:
    """Genera una lista de correos comunes para el dominio."""
    return [
        f"info@{domain}", 
        f"contact@{domain}", 
        f"admin@{domain}",
        f"support@{domain}", 
        f"test@{domain}", 
        f"dev@{domain}",
        f"contacto@{domain}", 
        f"ventas@{domain}", 
        f"soporte@{domain}",
        f"ayuda@{domain}",
        f"webmaster@{domain}",
        f"security@{domain}",
        f"no-reply@{domain}",
        f"noreply@{domain}",
        f"sales@{domain}",
        f"marketing@{domain}",
    ]