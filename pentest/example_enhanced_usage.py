#!/usr/bin/env python3
"""
Ejemplo de uso del sistema mejorado de detección de tecnologías

Este archivo muestra cómo utilizar las nuevas funcionalidades implementadas
para la detección avanzada de tecnologías web.
"""

import asyncio
import json
from pathlib import Path

# Importar las nuevas clases implementadas
from enhanced_fingerprint import EnhancedTechDetector, parallel_tech_analysis
from tech_mapping import DynamicTechMapping
from metrics import TechDetectionMetrics


async def example_enhanced_detection():
    """
    Ejemplo completo de detección mejorada de tecnologías
    """
    print("=== Ejemplo de Detección Mejorada de Tecnologías ===")
    
    # URLs de ejemplo para analizar
    urls = [
        "https://example.com",
        "https://wordpress.org",
        "https://github.com",
        "https://stackoverflow.com"
    ]
    
    # 1. Inicializar el detector mejorado
    print("\n1. Inicializando detector mejorado...")
    detector = EnhancedTechDetector(
        cache_ttl=3600,  # Cache por 1 hora
        confidence_threshold=0.3,  # Umbral de confianza mínimo
        max_workers=4  # Máximo 4 workers concurrentes
    )
    
    # 2. Realizar análisis paralelo
    print("\n2. Ejecutando análisis paralelo de tecnologías...")
    results = await parallel_tech_analysis(urls, detector, max_workers=2)
    
    # 3. Mostrar resultados
    print("\n3. Resultados de detección:")
    for url, tech_data in results.items():
        print(f"\n--- {url} ---")
        if tech_data.get('error'):
            print(f"Error: {tech_data['error']}")
            continue
            
        technologies = tech_data.get('technologies', [])
        print(f"Tecnologías detectadas: {len(technologies)}")
        
        for tech in technologies[:5]:  # Mostrar solo las primeras 5
            print(f"  - {tech['name']} (v{tech.get('version', 'N/A')}) "
                  f"[Confianza: {tech['confidence']:.2f}] "
                  f"[Fuente: {tech['source']}]")
    
    # 4. Usar mapeo dinámico para análisis específicos
    print("\n4. Aplicando mapeo dinámico de tecnologías...")
    tech_mapper = DynamicTechMapping()
    
    for url, tech_data in results.items():
        if tech_data.get('error'):
            continue
            
        print(f"\n--- Análisis específico para {url} ---")
        technologies = tech_data.get('technologies', [])
        
        # Obtener plantillas de análisis recomendadas
        analysis_templates = tech_mapper.get_analysis_templates(technologies)
        security_checks = tech_mapper.get_security_checks(technologies)
        
        print(f"Plantillas Nuclei recomendadas: {len(analysis_templates)}")
        for template in analysis_templates[:3]:  # Mostrar solo las primeras 3
            print(f"  - {template}")
            
        print(f"Checks de seguridad recomendados: {len(security_checks)}")
        for check in security_checks[:3]:  # Mostrar solo los primeros 3
            print(f"  - {check}")
    
    # 5. Generar reporte de análisis
    print("\n5. Generando reporte de análisis...")
    sample_url = next(iter(results.keys()))
    sample_tech = results[sample_url].get('technologies', [])
    
    if sample_tech:
        report = tech_mapper.generate_analysis_report(sample_tech, sample_url)
        print(f"\nReporte generado para {sample_url}:")
        print(f"  - Tecnologías analizadas: {report['summary']['total_technologies']}")
        print(f"  - Nivel de riesgo: {report['summary']['risk_level']}")
        print(f"  - Recomendaciones: {len(report['recommendations'])}")
    
    # 6. Mostrar métricas del detector
    print("\n6. Métricas de rendimiento:")
    metrics = detector.get_metrics()
    print(f"  - Total de análisis: {metrics.total_detections}")
    print(f"  - Tiempo promedio: {metrics.avg_detection_time:.2f}s")
    print(f"  - Tecnologías únicas detectadas: {len(metrics.unique_technologies)}")
    print(f"  - Tasa de éxito: {metrics.success_rate:.2%}")


def example_metrics_usage():
    """
    Ejemplo de uso del sistema de métricas
    """
    print("\n=== Ejemplo de Sistema de Métricas ===")
    
    # Inicializar sistema de métricas
    metrics = TechDetectionMetrics()
    
    # Simular algunas detecciones
    print("\n1. Simulando detecciones...")
    
    # Detección exitosa
    metrics.record_detection(
        url="https://example.com",
        tool="wappalyzer",
        technologies=["WordPress", "PHP", "MySQL"],
        detection_time=2.5,
        success=True
    )
    
    # Detección con error
    metrics.record_detection(
        url="https://timeout-example.com",
        tool="whatweb",
        technologies=[],
        detection_time=30.0,
        success=False,
        error="Connection timeout"
    )
    
    # Otra detección exitosa
    metrics.record_detection(
        url="https://react-app.com",
        tool="httpx",
        technologies=["React", "Node.js", "Nginx"],
        detection_time=1.8,
        success=True
    )
    
    # 2. Generar reporte de rendimiento
    print("\n2. Generando reporte de rendimiento...")
    report = metrics.generate_performance_report()
    
    print(f"\nEstadísticas generales:")
    print(f"  - Total detecciones: {report['summary']['total_detections']}")
    print(f"  - Tasa de éxito: {report['summary']['success_rate']:.2%}")
    print(f"  - Tiempo promedio: {report['summary']['avg_time']:.2f}s")
    
    print(f"\nTecnologías más detectadas:")
    for tech, count in report['technologies']['most_detected'][:3]:
        print(f"  - {tech}: {count} veces")
    
    print(f"\nHerramientas por rendimiento:")
    for tool_name, tool_stats in report['tools'].items():
        print(f"  - {tool_name}: {tool_stats['success_rate']:.2%} éxito, "
              f"{tool_stats['avg_time']:.2f}s promedio")
    
    # 3. Exportar métricas
    print("\n3. Exportando métricas...")
    metrics_file = "tech_detection_metrics.json"
    metrics.export_metrics(metrics_file)
    print(f"Métricas exportadas a: {metrics_file}")


def example_configuration():
    """
    Ejemplo de configuración personalizada
    """
    print("\n=== Ejemplo de Configuración Personalizada ===")
    
    # Configuración personalizada para el detector
    custom_config = {
        'wappalyzer': {
            'enabled': True,
            'timeout': 30,
            'user_agent': 'Custom-Scanner/1.0'
        },
        'whatweb': {
            'enabled': True,
            'aggression': 3,
            'timeout': 25
        },
        'httpx': {
            'enabled': True,
            'tech_detect': True,
            'follow_redirects': True,
            'timeout': 20
        },
        'custom_patterns': {
            'enabled': True,
            'patterns_file': 'custom_tech_patterns.yaml'
        }
    }
    
    print("Configuración personalizada:")
    print(json.dumps(custom_config, indent=2))
    
    # Ejemplo de patrones personalizados
    custom_patterns = {
        'MyCustomCMS': {
            'headers': {
                'X-Powered-By': r'MyCustomCMS/([\d\.]+)'
            },
            'html': {
                'generator': r'<meta name="generator" content="MyCustomCMS ([\d\.]+)"'
            },
            'confidence': 0.9
        }
    }
    
    print("\nPatrones personalizados de ejemplo:")
    print(json.dumps(custom_patterns, indent=2))


if __name__ == "__main__":
    print("Ejecutando ejemplos de uso del sistema mejorado...")
    
    # Ejecutar ejemplo de detección mejorada
    asyncio.run(example_enhanced_detection())
    
    # Ejecutar ejemplo de métricas
    example_metrics_usage()
    
    # Mostrar ejemplo de configuración
    example_configuration()
    
    print("\n=== Ejemplos completados ===")
    print("\nPara usar estas funcionalidades en tu código:")
    print("1. Importa las clases necesarias")
    print("2. Configura el detector según tus necesidades")
    print("3. Ejecuta el análisis de tecnologías")
    print("4. Aplica el mapeo dinámico para análisis específicos")
    print("5. Monitorea el rendimiento con el sistema de métricas")