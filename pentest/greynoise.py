import logging
import json
from pathlib import Path
import requests

log = logging.getLogger("pentest")

GREYNOISE_API_URL = "https://api.greynoise.io/v3/community/{ip}"

def check_greynoise(ip: str, api_key: str) -> dict:
    """Consulta la API de GreyNoise para una IP dada."""
    if not api_key:
        log.warning("GREYNOISE_API_KEY no configurada. Saltando la comprobaciÃ³n de GreyNoise.")
        return {}

    headers = {"key": api_key}
    try:
        response = requests.get(GREYNOISE_API_URL.format(ip=ip), headers=headers)
        if response.status_code == 404:
            return {"ip": ip, "noise": False, "riot": False, "message": "IP not found"}
        response.raise_for_status()  # Raise an HTTPError for bad responses (4xx or 5xx)
        return response.json()
    except requests.exceptions.RequestException as e:
        log.error(f"Error al consultar GreyNoise para {ip}: {e}")
        return {}

def is_ip_malicious_greynoise(domain: str, tmp_dir: Path, api_key: str) -> bool:
    # En este contexto, 'domain' puede ser un dominio o una IP. Necesitamos una IP para GreyNoise.
    # Por ahora, asumimos que si es una IP, se pasa directamente. Si es un dominio, se necesitarÃ­a
    # una resoluciÃ³n previa o que el paso 'recon' ya haya proporcionado la IP.
    # Para simplificar, usaremos el 'domain' como 'ip' para la llamada a GreyNoise.
    ip = domain
    """Verifica si una IP es clasificada como maliciosa por GreyNoise."""
    gn_data = check_greynoise(ip, api_key)

    greynoise_file = tmp_dir / f"{domain}_greynoise.json"
    try:
        with open(greynoise_file, 'w') as f:
            json.dump(gn_data, f, indent=4)
        log.info(f"Resultados de GreyNoise guardados en {greynoise_file}")
    except IOError as e:
        log.error(f"Error al guardar los resultados de GreyNoise en {greynoise_file}: {e}")

    if gn_data and gn_data.get("classification") == "malicious":
        log.warning(f"ðŸš¨ Â¡Alerta! La IP {ip} es clasificada como MALICIOSA por GreyNoise.")
        return True
    return False