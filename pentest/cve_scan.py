import json
import logging
from pathlib import Path
from typing import List, Dict, Any

from pentest.exceptions import ScanError

log = logging.getLogger(__name__)

def cve_scan(httpx_file: Path, tmp_dir: Path) -> Path:
    """Scans for CVEs based on identified technologies from httpx results.
    
    Args:
        httpx_file: Path to the JSON file containing httpx results (with tech-detect).
        tmp_dir: Temporary directory for storing results.
        
    Returns:
        Path to the JSON file with CVE findings.
        
    Raises:
        CVEScanError: If the CVE scan fails.
    """
    log.info("üîç Iniciando escaneo de CVEs.")
    
    output_file = tmp_dir / "cves.json"
    cve_findings: List[Dict[str, Any]] = []

    if not httpx_file.exists():
        log.warning(f"Archivo httpx no encontrado: {httpx_file}. No se realizar√° escaneo de CVEs.")
        with open(output_file, "w") as f:
            json.dump([], f)
        return output_file

    try:
        with open(httpx_file, "r") as f:
            httpx_data = json.load(f)

        for host_data in httpx_data:
            technologies = host_data.get("tech", [])
            url = host_data.get("url", "N/A")

            for tech in technologies:
                tech_name = tech.get("name", "").lower()
                tech_version = tech.get("version", "")

                # Placeholder for actual CVE lookup logic
                # In a real scenario, this would query a CVE database/API
                # For demonstration, we'll simulate some findings
                if "nginx" in tech_name and tech_version.startswith("1.18"):
                    cve_findings.append({
                        "cve_id": "CVE-2021-XXXX",
                        "description": "Simulated CVE for Nginx 1.18",
                        "severity": "High",
                        "affected_technology": f"Nginx {tech_version}",
                        "url": url
                    })
                elif "apache http server" in tech_name and tech_version.startswith("2.4"):
                    cve_findings.append({
                        "cve_id": "CVE-2022-YYYY",
                        "description": "Simulated CVE for Apache HTTP Server 2.4",
                        "severity": "Medium",
                        "affected_technology": f"Apache HTTP Server {tech_version}",
                        "url": url
                    })

        with open(output_file, "w") as f:
            json.dump(cve_findings, f, indent=2)

        log.info("‚úÖ Escaneo de CVEs completado: %d hallazgos", len(cve_findings))
        return output_file

    except Exception as e:
        raise CVEScanError(f"Error durante el escaneo de CVEs: {str(e)}") from e