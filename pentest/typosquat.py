"""M√≥dulo para detecci√≥n de dominios typosquatting."""

import csv
import json
import logging
import os
from pathlib import Path
from typing import Dict, List, Any, Optional

from pentest.runners import run_cmd
from pentest.exceptions import TyposquatError
from pentest.config import DEFAULT_TIMEOUT

# Configuraci√≥n de logging
log = logging.getLogger(__name__)

def check_typosquats(domain: str, tmp_dir: Path) -> Path:
    """Detecta posibles dominios typosquatting utilizando dnstwist.
    
    Args:
        domain: Dominio objetivo
        tmp_dir: Directorio temporal para almacenar resultados
        
    Returns:
        Path al archivo JSON con los dominios typosquatting detectados
        
    Raises:
        TyposquatError: Si falla la detecci√≥n de dominios typosquatting
    """
    log.info("üîç Iniciando detecci√≥n de dominios typosquatting para %s", domain)
    
    output_file = tmp_dir / "typosquats.json"
    csv_file = tmp_dir / "typosquats.csv"
    
    # Intentar con dnstwist
    try:
        log.info("Ejecutando dnstwist para %s", domain)
        dnstwist_cmd = [
            "dnstwist",
            "--format", "csv",
            "--output", str(csv_file),
            "--registered",
            domain
        ]
        
        run_cmd(dnstwist_cmd, timeout=DEFAULT_TIMEOUT)
        
        # Verificar que se gener√≥ el archivo CSV
        if not csv_file.exists():
            raise TyposquatError("dnstwist no gener√≥ el archivo CSV")
        
        # Convertir CSV a JSON
        results = []
        with open(csv_file, "r", newline="") as f:
            reader = csv.DictReader(f)
            for row in reader:
                # Filtrar solo dominios registrados
                if row.get("dns-a") or row.get("dns-aaaa") or row.get("dns-mx") or row.get("dns-ns"):
                    results.append(row)
        
        # Guardar resultados
        with open(output_file, "w") as f:
            json.dump(results, f, indent=2)
        
        log.info("‚úÖ Detecci√≥n de typosquatting completada: %d dominios encontrados", len(results))
        return output_file
        
    except Exception as e:
        log.warning("dnstwist fall√≥: %s", str(e))
        
        # Crear un CSV b√°sico como alternativa
        try:
            log.info("Creando CSV b√°sico para %s", domain)
            
            # Generar algunas variaciones b√°sicas
            variations = [
                {"fuzzer": "addition", "domain": f"www{domain}"},
                {"fuzzer": "addition", "domain": f"my{domain}"},
                {"fuzzer": "replacement", "domain": domain.replace(".", "-")},
                {"fuzzer": "homoglyph", "domain": domain.replace("e", "3").replace("a", "4")},
                {"fuzzer": "subdomain", "domain": f"secure.{domain}"},
                {"fuzzer": "hyphenation", "domain": "-".join(domain.split(".")[0])},
            ]
            
            # Guardar resultados
            with open(output_file, "w") as f:
                json.dump(variations, f, indent=2)
            
            log.info("‚úÖ Creado JSON b√°sico con %d variaciones de dominio", len(variations))
            return output_file
            
        except Exception as e2:
            log.error("Fall√≥ la creaci√≥n de variaciones b√°sicas: %s", str(e2))
            
            # Crear un archivo de resultados vac√≠o
            with open(output_file, "w") as f:
                json.dump([], f)
                
            return output_file