#!/usr/bin/env python3
"""
Demostración del Sistema de IA/ML Predictivo
Ejemplo de uso del sistema de análisis predictivo de seguridad
"""

import json
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any
import random

try:
    from .ml_predictive_analysis import (
        MLPredictiveAnalyzer, SecurityEvent, create_sample_events
    )
    from .ml_integration import MLIntegrationManager, enhance_scan_with_ml
    from .config.ml_config import ML_CONFIG
except ImportError:
    # Para ejecución directa
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    
    from ml_predictive_analysis import (
        MLPredictiveAnalyzer, SecurityEvent, create_sample_events
    )
    from ml_integration import MLIntegrationManager, enhance_scan_with_ml
    from config.ml_config import ML_CONFIG

# Configuración de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class MLDemo:
    """Clase de demostración para el sistema ML"""
    
    def __init__(self):
        self.ml_analyzer = MLPredictiveAnalyzer()
        self.ml_manager = MLIntegrationManager()
        self.demo_data = []
    
    def generate_realistic_scan_results(self, count: int = 10) -> List[Dict[str, Any]]:
        """Genera resultados de escaneo realistas para la demo"""
        scan_results = []
        
        # Plantillas de tecnologías comunes
        tech_templates = [
            {"name": "WordPress", "version": "6.3.2", "confidence": 95},
            {"name": "Apache", "version": "2.4.41", "confidence": 90},
            {"name": "PHP", "version": "8.1.0", "confidence": 85},
            {"name": "MySQL", "version": "8.0.33", "confidence": 80},
            {"name": "Nginx", "version": "1.20.1", "confidence": 92},
            {"name": "React", "version": "18.2.0", "confidence": 88},
            {"name": "Node.js", "version": "18.17.0", "confidence": 87}
        ]
        
        # Plantillas de vulnerabilidades
        vuln_templates = [
            {
                "id": "CVE-2023-1234",
                "title": "SQL Injection in WordPress Plugin",
                "severity": "HIGH",
                "cvss_score": 8.1,
                "description": "SQL injection vulnerability in popular WordPress plugin"
            },
            {
                "id": "CVE-2023-5678",
                "title": "Cross-Site Scripting (XSS)",
                "severity": "MEDIUM",
                "cvss_score": 6.1,
                "description": "Reflected XSS vulnerability in web application"
            },
            {
                "id": "CVE-2023-9012",
                "title": "Remote Code Execution",
                "severity": "CRITICAL",
                "cvss_score": 9.8,
                "description": "Critical RCE vulnerability in web server"
            },
            {
                "id": "CVE-2023-3456",
                "title": "Directory Traversal",
                "severity": "MEDIUM",
                "cvss_score": 5.3,
                "description": "Path traversal vulnerability allows file access"
            }
        ]
        
        domains = [
            "example.com", "testsite.org", "webapp.net", "secure-app.io",
            "vulnerable-site.com", "old-system.gov", "ecommerce.shop",
            "blog.example.org", "api.service.com", "admin.portal.net"
        ]
        
        for i in range(count):
            # Determinar si será un sitio vulnerable
            is_vulnerable = random.random() < 0.4  # 40% vulnerable
            
            # Seleccionar tecnologías
            num_techs = random.randint(2, 5)
            technologies = random.sample(tech_templates, num_techs)
            
            # Generar vulnerabilidades
            vulnerabilities = []
            if is_vulnerable:
                num_vulns = random.randint(1, 8)
                for _ in range(num_vulns):
                    vuln = random.choice(vuln_templates).copy()
                    vuln["id"] = f"CVE-2023-{random.randint(1000, 9999)}"
                    vulnerabilities.append(vuln)
            
            # Generar puertos abiertos
            common_ports = [80, 443, 22, 21, 25, 53, 110, 143, 993, 995]
            dangerous_ports = [23, 135, 139, 445, 1433, 3389, 5432, 3306]
            
            open_ports = random.sample(common_ports, random.randint(2, 6))
            if is_vulnerable and random.random() < 0.3:
                open_ports.extend(random.sample(dangerous_ports, random.randint(1, 3)))
            
            # Información de red
            network_info = {
                "avg_response_time": random.uniform(0.1, 3.0),
                "ssl_enabled": random.choice([True, False]),
                "ssl_grade": random.choice(["A+", "A", "B", "C", "F"]) if random.choice([True, False]) else None
            }
            
            # Crear resultado de escaneo
            scan_result = {
                "scan_id": f"scan_{i+1:03d}",
                "target_domain": random.choice(domains),
                "timestamp": (datetime.now() - timedelta(days=random.randint(0, 30))).isoformat(),
                "scan_type": "comprehensive",
                "status": "completed",
                "technologies": technologies,
                "vulnerabilities": vulnerabilities,
                "open_ports": sorted(list(set(open_ports))),
                "network_info": network_info,
                "status_code": random.choice([200, 403, 404, 500]),
                "content_length": random.randint(1000, 50000),
                "headers": {
                    "Server": random.choice(["Apache/2.4.41", "nginx/1.20.1", "IIS/10.0"]),
                    "X-Powered-By": random.choice(["PHP/8.1.0", "ASP.NET", None])
                },
                "geo_location": {
                    "country": random.choice(["US", "CA", "GB", "DE", "FR", "JP", "AU"]),
                    "city": "Unknown"
                },
                "security_headers": {
                    "strict_transport_security": random.choice([True, False]),
                    "content_security_policy": random.choice([True, False]),
                    "x_frame_options": random.choice([True, False])
                }
            }
            
            scan_results.append(scan_result)
        
        return scan_results
    
    def demo_basic_ml_analysis(self):
        """Demuestra análisis ML básico"""
        print("\n" + "="*60)
        print("🤖 DEMOSTRACIÓN: Análisis ML Básico")
        print("="*60)
        
        # Generar eventos de muestra
        print("📊 Generando eventos de seguridad de muestra...")
        events = create_sample_events(150)
        
        print(f"✅ Generados {len(events)} eventos")
        print(f"   - Eventos maliciosos: {sum(1 for e in events if e.is_malicious)}")
        print(f"   - Eventos benignos: {sum(1 for e in events if not e.is_malicious)}")
        
        # Entrenar modelos
        print("\n🎯 Entrenando modelos de ML...")
        self.ml_analyzer.train_anomaly_detector(events)
        self.ml_analyzer.train_threat_classifier(events)
        
        # Generar eventos de prueba
        print("\n🔍 Realizando predicciones en eventos de prueba...")
        test_events = create_sample_events(20)
        
        predictions = []
        for event in test_events:
            prediction = self.ml_analyzer.predict_threat(event)
            predictions.append(prediction)
        
        # Mostrar resultados
        print("\n📈 Resultados de Predicciones:")
        malicious_predictions = sum(1 for p in predictions if p.prediction == "malicious")
        high_risk = sum(1 for p in predictions if p.risk_score > 70)
        anomalies = sum(1 for p in predictions if p.anomaly_score > 0.5)
        
        print(f"   - Amenazas detectadas: {malicious_predictions}/{len(predictions)}")
        print(f"   - Eventos de alto riesgo: {high_risk}/{len(predictions)}")
        print(f"   - Anomalías detectadas: {anomalies}/{len(predictions)}")
        
        # Mostrar ejemplos de predicciones
        print("\n🎯 Ejemplos de Predicciones:")
        for i, (event, pred) in enumerate(zip(test_events[:3], predictions[:3])):
            print(f"\n   Evento {i+1}:")
            print(f"     - Dominio: {event.target_domain}")
            print(f"     - Vulnerabilidades: {event.vulnerability_count}")
            print(f"     - Predicción: {pred.prediction.upper()}")
            print(f"     - Confianza: {pred.confidence:.2f}")
            print(f"     - Riesgo: {pred.risk_score:.1f}/100")
            if pred.recommendations:
                print(f"     - Recomendación: {pred.recommendations[0]}")
    
    def demo_scan_enhancement(self):
        """Demuestra mejora de escaneos con ML"""
        print("\n" + "="*60)
        print("🔬 DEMOSTRACIÓN: Mejora de Escaneos con ML")
        print("="*60)
        
        # Generar resultados de escaneo realistas
        print("📋 Generando resultados de escaneo realistas...")
        scan_results = self.generate_realistic_scan_results(5)
        
        print(f"✅ Generados {len(scan_results)} resultados de escaneo")
        
        # Procesar cada escaneo con ML
        print("\n🤖 Procesando escaneos con análisis ML...")
        
        for i, scan_result in enumerate(scan_results):
            print(f"\n--- Escaneo {i+1}: {scan_result['target_domain']} ---")
            
            # Mejorar con ML
            enhanced_result = self.ml_manager.enhance_scan_result(
                scan_result, scan_result['target_domain']
            )
            
            # Mostrar resultados
            print(f"🎯 Análisis Original:")
            print(f"   - Vulnerabilidades: {len(scan_result['vulnerabilities'])}")
            print(f"   - Tecnologías: {len(scan_result['technologies'])}")
            print(f"   - Puertos abiertos: {len(scan_result['open_ports'])}")
            
            print(f"\n🤖 Análisis ML Mejorado:")
            print(f"   - Nivel de riesgo: {enhanced_result.risk_assessment['risk_level']}")
            print(f"   - Puntuación de riesgo: {enhanced_result.risk_assessment['overall_risk']:.1f}/100")
            print(f"   - Confianza: {enhanced_result.confidence_score:.2f}")
            
            if enhanced_result.ml_prediction:
                print(f"   - Predicción ML: {enhanced_result.ml_prediction.prediction.upper()}")
                print(f"   - Anomalía detectada: {'Sí' if enhanced_result.ml_prediction.anomaly_score > 0.5 else 'No'}")
            
            print(f"\n💡 Recomendaciones principales:")
            for rec in enhanced_result.recommendations[:3]:
                print(f"   - {rec}")
    
    def demo_pattern_detection(self):
        """Demuestra detección de patrones de amenazas"""
        print("\n" + "="*60)
        print("🕵️ DEMOSTRACIÓN: Detección de Patrones de Amenazas")
        print("="*60)
        
        # Generar eventos con patrones específicos
        print("📊 Generando eventos con patrones de amenazas...")
        
        events = []
        base_time = datetime.now() - timedelta(days=7)
        
        # Patrón 1: Atacante frecuente
        attacker_ip = "192.168.1.100"
        for i in range(5):
            event = SecurityEvent(
                timestamp=base_time + timedelta(hours=i*2),
                event_type="attack",
                severity="HIGH",
                source_ip=attacker_ip,
                target_domain="vulnerable-site.com",
                vulnerability_count=random.randint(5, 15),
                threat_score=random.uniform(7, 10),
                technologies=["WordPress", "PHP"],
                ports_open=[80, 443, 22],
                response_time=1.0,
                status_code=200,
                payload_size=5000,
                user_agent="AttackBot/1.0",
                country="Unknown",
                is_malicious=True
            )
            events.append(event)
        
        # Patrón 2: Objetivo vulnerable
        vulnerable_domain = "old-system.gov"
        for i in range(8):
            event = SecurityEvent(
                timestamp=base_time + timedelta(hours=i*3),
                event_type="scan",
                severity="MEDIUM",
                source_ip=f"10.0.0.{random.randint(1, 255)}",
                target_domain=vulnerable_domain,
                vulnerability_count=random.randint(20, 50),
                threat_score=random.uniform(4, 8),
                technologies=["IIS", "ASP.NET", "Windows"],
                ports_open=[80, 443, 135, 139, 445],
                response_time=2.0,
                status_code=200,
                payload_size=3000,
                user_agent="Scanner/2.0",
                country="US",
                is_malicious=False
            )
            events.append(event)
        
        # Agregar eventos normales
        normal_events = create_sample_events(50)
        events.extend(normal_events)
        
        print(f"✅ Generados {len(events)} eventos con patrones")
        
        # Detectar patrones
        print("\n🔍 Detectando patrones de amenazas...")
        patterns = self.ml_analyzer.detect_threat_patterns(events)
        
        print(f"\n📈 Patrones Detectados: {len(patterns)}")
        
        for pattern in patterns:
            print(f"\n🎯 Patrón: {pattern.pattern_type}")
            print(f"   - ID: {pattern.pattern_id}")
            print(f"   - Frecuencia: {pattern.frequency}")
            print(f"   - Severidad: {pattern.severity}")
            print(f"   - Confianza: {pattern.confidence:.2f}")
            print(f"   - Indicadores: {', '.join(pattern.indicators)}")
            print(f"   - Período: {pattern.first_seen.strftime('%Y-%m-%d')} - {pattern.last_seen.strftime('%Y-%m-%d')}")
    
    def demo_predictive_report(self):
        """Demuestra generación de reporte predictivo"""
        print("\n" + "="*60)
        print("📊 DEMOSTRACIÓN: Reporte Predictivo Completo")
        print("="*60)
        
        # Generar datos diversos
        print("📋 Generando conjunto de datos diverso...")
        events = create_sample_events(100)
        
        # Generar reporte
        print("\n📈 Generando reporte predictivo...")
        report = self.ml_analyzer.generate_predictive_report(events)
        
        # Mostrar resumen
        print("\n📊 RESUMEN EJECUTIVO:")
        summary = report['summary']
        print(f"   - Total de eventos analizados: {summary['total_events']}")
        print(f"   - Eventos maliciosos detectados: {summary['malicious_events']}")
        print(f"   - Tasa de actividad maliciosa: {summary['malicious_rate']:.1%}")
        print(f"   - Eventos de alto riesgo: {summary['high_risk_events']}")
        print(f"   - Anomalías detectadas: {summary['anomalies_detected']}")
        print(f"   - Patrones de amenazas: {summary['patterns_found']}")
        
        # Mostrar recomendaciones estratégicas
        print("\n💡 RECOMENDACIONES ESTRATÉGICAS:")
        for rec in report['strategic_recommendations']:
            print(f"   - {rec}")
        
        # Mostrar estado del modelo
        print("\n🤖 ESTADO DEL SISTEMA ML:")
        model_perf = report['model_performance']
        print(f"   - Detector de anomalías: {'✅ Activo' if model_perf['anomaly_detector_loaded'] else '❌ Inactivo'}")
        print(f"   - Clasificador de amenazas: {'✅ Activo' if model_perf['threat_classifier_loaded'] else '❌ Inactivo'}")
        print(f"   - Estado general: {model_perf['models_status'].upper()}")
        
        # Mostrar tendencias si hay datos
        if report['daily_trends']:
            print("\n📈 TENDENCIAS TEMPORALES:")
            for date, count in list(report['daily_trends'].items())[:5]:
                print(f"   - {date}: {count} eventos")
    
    def run_complete_demo(self):
        """Ejecuta demostración completa del sistema ML"""
        print("🚀 INICIANDO DEMOSTRACIÓN COMPLETA DEL SISTEMA IA/ML PREDICTIVO")
        print("="*80)
        
        try:
            # Verificar configuración
            if ML_CONFIG:
                print(f"✅ Configuración ML cargada")
                print(f"   - Umbral de amenaza: {ML_CONFIG.get_threshold('threat_probability')}")
                print(f"   - Puertos peligrosos: {len(ML_CONFIG.DANGEROUS_PORTS)}")
            
            # Ejecutar demostraciones
            self.demo_basic_ml_analysis()
            self.demo_scan_enhancement()
            self.demo_pattern_detection()
            self.demo_predictive_report()
            
            # Mostrar estadísticas finales
            print("\n" + "="*60)
            print("📊 ESTADÍSTICAS FINALES DEL SISTEMA")
            print("="*60)
            
            stats = self.ml_manager.get_processing_stats()
            print(f"✅ Escaneos procesados: {stats['total_scans']}")
            print(f"🤖 Escaneos mejorados con ML: {stats['ml_enhanced_scans']}")
            print(f"💾 Cache hits: {stats['cache_hits']}")
            print(f"❌ Errores: {stats['errors']}")
            print(f"📈 Tasa de mejora ML: {stats.get('ml_enhancement_rate', 0):.1%}")
            
            print("\n🎉 DEMOSTRACIÓN COMPLETADA EXITOSAMENTE")
            print("\n💡 El sistema de IA/ML predictivo está listo para:")
            print("   - Detectar amenazas en tiempo real")
            print("   - Identificar patrones de ataque")
            print("   - Predecir vulnerabilidades")
            print("   - Generar recomendaciones inteligentes")
            print("   - Mejorar la precisión con el tiempo")
        
        except Exception as e:
            print(f"❌ Error en la demostración: {e}")
            logger.error(f"Error en demo: {e}", exc_info=True)

def main():
    """Función principal para ejecutar la demostración"""
    demo = MLDemo()
    demo.run_complete_demo()

if __name__ == "__main__":
    main()