#!/usr/bin/env python3
"""
Script de verificaci√≥n para confirmar que el an√°lisis ML est√° integrado en el pipeline.
"""

import os
import re
from pathlib import Path

def check_ml_integration():
    """Verifica que el an√°lisis ML est√© integrado en el pipeline."""
    
    print("üîç Verificando integraci√≥n del an√°lisis ML en el pipeline...")
    
    # Verificar que core.py existe
    core_file = Path("core.py")
    if not core_file.exists():
        print("‚ùå Archivo core.py no encontrado")
        return False
    
    # Leer el contenido de core.py
    with open(core_file, 'r', encoding='utf-8') as f:
        core_content = f.read()
    
    # Verificaciones
    checks = [
        ("MLIntegrationManager import", r"from \.ml_integration import MLIntegrationManager"),
        ("ml_manager initialization", r"self\.ml_manager\s*=.*MLIntegrationManager"),
        ("_run_ml_analysis method", r"def _run_ml_analysis\(self"),
        ("ml_analysis step configuration", r'"ml_analysis":\s*ScanStep'),
        ("ml_analysis in execution order", r'\["ml_analysis"\]'),
        ("ml_analysis timeout", r'"ml_analysis":\s*\d+'),
    ]
    
    results = []
    for check_name, pattern in checks:
        if re.search(pattern, core_content):
            print(f"‚úÖ {check_name}: ENCONTRADO")
            results.append(True)
        else:
            print(f"‚ùå {check_name}: NO ENCONTRADO")
            results.append(False)
    
    # Verificar archivos ML
    ml_files = [
        "ml_integration.py",
        "ml_predictive_analysis.py",
        "config/ml_config.py"
    ]
    
    print("\nüìÅ Verificando archivos del sistema ML...")
    for ml_file in ml_files:
        if Path(ml_file).exists():
            print(f"‚úÖ {ml_file}: EXISTE")
            results.append(True)
        else:
            print(f"‚ùå {ml_file}: NO EXISTE")
            results.append(False)
    
    # Verificar contenido espec√≠fico del m√©todo _run_ml_analysis
    print("\nüîç Verificando implementaci√≥n de _run_ml_analysis...")
    
    ml_method_checks = [
        ("ML manager check", r"if not self\.ml_manager:"),
        ("Scan result creation", r"scan_result\s*=\s*\{"),
        ("Fingerprint data extraction", r"finger.*json\.load"),
        ("Nuclei data extraction", r"nuclei.*json\.load"),
        ("CVE data extraction", r"cve.*json\.load"),
        ("Nmap data extraction", r"nmap.*json\.load"),
        ("ML enhancement call", r"enhance_scan_result"),
        ("Results saving", r"ml_file.*json\.dump"),
    ]
    
    for check_name, pattern in ml_method_checks:
        if re.search(pattern, core_content, re.DOTALL):
            print(f"‚úÖ {check_name}: IMPLEMENTADO")
            results.append(True)
        else:
            print(f"‚ùå {check_name}: NO IMPLEMENTADO")
            results.append(False)
    
    # Verificar que test_ml_integration.py funciona
    print("\nüß™ Verificando script de prueba ML...")
    test_file = Path("test_ml_integration.py")
    if test_file.exists():
        print(f"‚úÖ test_ml_integration.py: EXISTE")
        results.append(True)
        
        # Ejecutar prueba b√°sica
        try:
            import subprocess
            result = subprocess.run(
                ["python", "test_ml_integration.py"], 
                capture_output=True, 
                text=True, 
                timeout=30
            )
            if result.returncode == 0:
                print(f"‚úÖ test_ml_integration.py: EJECUTA CORRECTAMENTE")
                results.append(True)
            else:
                print(f"‚ùå test_ml_integration.py: ERROR EN EJECUCI√ìN")
                print(f"   Error: {result.stderr[:200]}...")
                results.append(False)
        except Exception as e:
            print(f"‚ö†Ô∏è test_ml_integration.py: NO SE PUDO EJECUTAR ({e})")
            results.append(False)
    else:
        print(f"‚ùå test_ml_integration.py: NO EXISTE")
        results.append(False)
    
    # Resumen
    total_checks = len(results)
    passed_checks = sum(results)
    success_rate = (passed_checks / total_checks) * 100
    
    print(f"\nüìä RESUMEN DE VERIFICACI√ìN:")
    print(f"   ‚Ä¢ Total de verificaciones: {total_checks}")
    print(f"   ‚Ä¢ Verificaciones exitosas: {passed_checks}")
    print(f"   ‚Ä¢ Tasa de √©xito: {success_rate:.1f}%")
    
    if success_rate >= 90:
        print(f"\nüéâ INTEGRACI√ìN ML COMPLETAMENTE FUNCIONAL")
        print(f"   El sistema de IA/ML predictivo est√° correctamente integrado en el esc√°ner.")
        return True
    elif success_rate >= 70:
        print(f"\n‚ö†Ô∏è INTEGRACI√ìN ML PARCIALMENTE FUNCIONAL")
        print(f"   La mayor√≠a de componentes est√°n integrados, pero hay algunos problemas menores.")
        return True
    else:
        print(f"\n‚ùå INTEGRACI√ìN ML INCOMPLETA")
        print(f"   Se requieren correcciones adicionales para completar la integraci√≥n.")
        return False

if __name__ == "__main__":
    try:
        success = check_ml_integration()
        if success:
            print("\n‚úÖ VERIFICACI√ìN COMPLETADA EXITOSAMENTE")
        else:
            print("\n‚ùå VERIFICACI√ìN FALL√ì")
            exit(1)
    except Exception as e:
        print(f"‚ùå Error durante la verificaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        exit(1)