#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
M√≥dulo de detecci√≥n de WAF (Web Application Firewall)
Integrado con el pipeline de pentesting para detectar y reportar WAFs.
"""

import json
import logging
import asyncio
from pathlib import Path
from typing import Dict, Any, Optional

from pentest.waf_handler import detect_waf_for_domain, WAFType


def run_waf_detection(domain: str, tmp_dir: Path) -> Optional[Path]:
    """
    Ejecuta la detecci√≥n de WAF para un dominio espec√≠fico.
    
    Args:
        domain: El dominio a analizar
        tmp_dir: Directorio temporal para guardar resultados
        
    Returns:
        Path al archivo JSON con los resultados o None si hay error
    """
    logger = logging.getLogger(__name__)
    logger.info(f"üõ°Ô∏è [WAF] Iniciando detecci√≥n de WAF para {domain}")
    
    try:
        # Ejecutar detecci√≥n de WAF
        # La funci√≥n detect_waf_for_domain ya devuelve un resultado, no una corrutina
        waf_result = detect_waf_for_domain(domain)
        
        if not waf_result:
            logger.warning(f"üõ°Ô∏è [WAF] No se pudo detectar WAF para {domain}")
            return None
            
        # Preparar datos para el reporte
        waf_data = {
            "domain": domain,
            "waf_type": waf_result.get("waf_type", "unknown"),
            "detection_details": {
                "detected_patterns": waf_result.get("detected_patterns", []),
                "confidence": waf_result.get("confidence", 0),
                "evidence": waf_result.get("evidence", {}),
                "detection_method": waf_result.get("detection_method", "headers_analysis"),
                "timestamp": waf_result.get("timestamp")
            },
            "evasion_recommendations": waf_result.get("evasion_recommendations", []),
            "impact_assessment": {
                "scan_difficulty": "high" if waf_result.get("waf_type") in ["cloudflare", "aws_waf", "akamai"] else "medium",
                "recommended_techniques": waf_result.get("recommended_techniques", []),
                "timeout_adjustments": waf_result.get("timeout_adjustments", {})
            }
        }
        
        # Guardar resultados
        output_file = tmp_dir / "waf_detection.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(waf_data, f, indent=2, ensure_ascii=False)
            
        logger.info(f"üõ°Ô∏è [WAF] Detecci√≥n completada. WAF detectado: {waf_data['waf_type']}")
        logger.info(f"üõ°Ô∏è [WAF] Confianza: {waf_data['detection_details']['confidence']}%")
        logger.info(f"üõ°Ô∏è [WAF] Resultados guardados en: {output_file}")
        
        return output_file
        
    except Exception as e:
        logger.error(f"üõ°Ô∏è [WAF] Error durante la detecci√≥n de WAF para {domain}: {e}")
        return None


if __name__ == "__main__":
    import sys
    import tempfile
    
    if len(sys.argv) != 2:
        print("Uso: python waf_detection.py <dominio>")
        sys.exit(1)
        
    domain = sys.argv[1]
    
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Crear directorio temporal
    with tempfile.TemporaryDirectory() as tmp_dir:
        tmp_path = Path(tmp_dir)
        result_file = run_waf_detection(domain, tmp_path)
        
        if result_file:
            print(f"Resultados guardados en: {result_file}")
            with open(result_file, 'r', encoding='utf-8') as f:
                print(json.dumps(json.load(f), indent=2, ensure_ascii=False))
        else:
            print("Error en la detecci√≥n de WAF")
            sys.exit(1)