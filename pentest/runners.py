"""Utilidades para ejecutar comandos y gestionar hilos."""

import logging
import subprocess
from concurrent.futures import ThreadPoolExecutor
from shlex import quote
from typing import List, Union, Optional

from pentest.config import DEFAULT_TIMEOUT

# Configuración de logging
log = logging.getLogger(__name__)

# Executor global para reutilizar hilos
thread_pool = ThreadPoolExecutor(max_workers=10)

def run_cmd(
    cmd: Union[str, List[str]], 
    ignore: bool = False, 
    timeout: int = DEFAULT_TIMEOUT,
    cwd: Optional[str] = None
) -> str:
    """Ejecuta un comando shell de forma segura y captura su salida.
    
    Args:
        cmd: Comando a ejecutar (string o lista de argumentos)
        ignore: Si es True, ignora errores de ejecución
        timeout: Tiempo máximo de ejecución en segundos
        cwd: Directorio de trabajo para el comando
        
    Returns:
        La salida estándar del comando como string
        
    Raises:
        subprocess.TimeoutExpired: Si el comando excede el timeout
        subprocess.CalledProcessError: Si el comando falla y ignore=False
    """
    # Convertir lista de argumentos a string con escape adecuado
    if isinstance(cmd, list):
        cmd = " ".join(quote(c) for c in cmd)
    
    log.debug("⏩ %s", cmd)
    
    try:
        res = subprocess.run(
            cmd, 
            shell=True,
            capture_output=True, 
            text=True,
            timeout=timeout, 
            check=not ignore,
            cwd=cwd
        )
        
        if res.stderr.strip():
            log.debug("stderr: %s", res.stderr.strip())
            
        return res.stdout
    except subprocess.TimeoutExpired as e:
        log.error("⌛ Timeout (%ss): %s", timeout, cmd)
        if ignore:
            return ""
        raise