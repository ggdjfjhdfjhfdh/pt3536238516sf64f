#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Activación del Sistema Mejorado de Detección de Tecnologías
Este script integra las mejoras en el sistema existente de manera simple y segura.
"""

import os
import sys
import json
import shutil
import logging
from pathlib import Path
from datetime import datetime

# Configurar logging simple
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
log = logging.getLogger(__name__)

class EnhancedDetectionActivator:
    """Activador simple para el sistema mejorado de detección."""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.pentest_dir = self.project_root / "pentest"
        self.core_file = self.pentest_dir / "core.py"
        
    def activate(self) -> bool:
        """Activa el sistema mejorado de detección."""
        try:
            log.info("Iniciando activacion del sistema mejorado...")
            
            # 1. Verificar prerrequisitos
            if not self._check_prerequisites():
                return False
            
            # 2. Crear backup del core.py
            if not self._backup_core():
                return False
            
            # 3. Integrar con core.py
            if not self._integrate_with_core():
                return False
            
            # 4. Verificar funcionamiento
            if not self._test_integration():
                log.warning("Integracion completada pero con advertencias")
            
            log.info("Sistema mejorado activado exitosamente!")
            self._print_success_message()
            return True
            
        except Exception as e:
            log.error(f"Error durante la activacion: {e}")
            return False
    
    def _check_prerequisites(self) -> bool:
        """Verifica prerrequisitos básicos."""
        log.info("Verificando prerrequisitos...")
        
        # Verificar archivos necesarios
        required_files = [
            "enhanced_fingerprint.py",
            "web_content_analyzer.py",
            "enhanced_integration.py",
            "tech_mapping.py",
            "metrics.py"
        ]
        
        missing_files = []
        for file_name in required_files:
            if not (self.pentest_dir / file_name).exists():
                missing_files.append(file_name)
        
        if missing_files:
            log.error(f"Archivos faltantes: {', '.join(missing_files)}")
            return False
        
        if not self.core_file.exists():
            log.error("Archivo core.py no encontrado")
            return False
        
        log.info("Prerrequisitos verificados")
        return True
    
    def _backup_core(self) -> bool:
        """Crea backup del archivo core.py."""
        try:
            backup_name = f"core_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
            backup_path = self.pentest_dir / backup_name
            
            shutil.copy2(self.core_file, backup_path)
            log.info(f"Backup creado: {backup_name}")
            return True
            
        except Exception as e:
            log.error(f"Error creando backup: {e}")
            return False
    
    def _integrate_with_core(self) -> bool:
        """Integra el sistema mejorado con core.py."""
        try:
            log.info("Integrando con core.py...")
            
            # Leer archivo core.py actual
            with open(self.core_file, 'r', encoding='utf-8') as f:
                core_content = f.read()
            
            # Verificar si ya está integrado
            if "enhanced_integration" in core_content:
                log.info("Sistema ya integrado")
                return True
            
            # Añadir import al inicio
            import_line = "from .enhanced_integration import EnhancedTechIntegrator\n"
            
            # Buscar línea de imports existentes
            lines = core_content.split('\n')
            import_inserted = False
            
            for i, line in enumerate(lines):
                if line.startswith('from .') and 'import' in line:
                    lines.insert(i + 1, import_line.strip())
                    import_inserted = True
                    break
            
            if not import_inserted:
                # Insertar después de los imports estándar
                for i, line in enumerate(lines):
                    if line.startswith('import ') and i > 0:
                        lines.insert(i + 1, import_line.strip())
                        break
            
            # Añadir inicialización del sistema mejorado
            integration_code = '''

# === SISTEMA MEJORADO DE DETECCION DE TECNOLOGIAS ===
try:
    # Inicializar integrador mejorado
    enhanced_integrator = EnhancedTechIntegrator(
        enable_fallback=True,
        enable_web_content_analysis=True
    )
    
    if enhanced_integrator.is_available():
        log.info("Sistema mejorado de deteccion disponible")
        
        # Reemplazar función de fingerprinting si está disponible
        def enhanced_fingerprint_wrapper(target, timeout=30):
            """Wrapper para fingerprinting mejorado con fallback."""
            try:
                result = enhanced_integrator.detect_technologies(target)
                if result and result.get('technologies'):
                    return result
            except Exception as e:
                log.warning(f"Fingerprinting mejorado falló, usando básico: {e}")
            
            # Fallback al sistema original
            from .fingerprint import fingerprint_target
            return fingerprint_target(target, timeout)
        
        # Reemplazar la función original
        globals()['fingerprint_target'] = enhanced_fingerprint_wrapper
        
    else:
        log.warning("Sistema mejorado no disponible, usando sistema básico")
        
except Exception as e:
    log.error(f"Error inicializando sistema mejorado: {e}")
    log.info("Continuando con sistema básico")
# === FIN SISTEMA MEJORADO ===
'''
            
            # Insertar código de integración antes de la función main o al final
            content_with_integration = '\n'.join(lines) + integration_code
            
            # Escribir archivo modificado
            with open(self.core_file, 'w', encoding='utf-8') as f:
                f.write(content_with_integration)
            
            log.info("Integracion con core.py completada")
            return True
            
        except Exception as e:
            log.error(f"Error integrando con core.py: {e}")
            return False
    
    def _test_integration(self) -> bool:
        """Prueba básica de la integración."""
        try:
            log.info("Probando integracion...")
            
            # Intentar importar el módulo modificado
            sys.path.insert(0, str(self.pentest_dir.parent))
            
            try:
                from pentest.enhanced_integration import EnhancedTechIntegrator
                
                # Crear instancia de prueba
                integrator = EnhancedTechIntegrator(enable_fallback=True)
                
                if integrator.is_available():
                    log.info("Test de integracion exitoso")
                    return True
                else:
                    log.warning("Sistema mejorado no completamente disponible")
                    return False
                    
            except ImportError as e:
                log.error(f"Error importando modulos: {e}")
                return False
            
        except Exception as e:
            log.error(f"Error probando integracion: {e}")
            return False
    
    def _print_success_message(self):
        """Imprime mensaje de éxito."""
        print("\n" + "="*60)
        print("SISTEMA MEJORADO DE DETECCION ACTIVADO")
        print("="*60)
        print("\nCaracteristicas activadas:")
        print("- Deteccion multi-herramienta (Wappalyzer + WhatWeb + Custom)")
        print("- Analisis de contenido web (HTML, CSS, JavaScript)")
        print("- Cache inteligente para mejor rendimiento")
        print("- Metricas de deteccion y rendimiento")
        print("- Fallback automatico al sistema original")
        
        print("\nProximos pasos:")
        print("1. Reiniciar el servicio pentest-express-api")
        print("2. Ejecutar un escaneo de prueba")
        print("3. Verificar logs para confirmar funcionamiento")
        
        print("\nArchivos de configuracion:")
        print("- pentest/config/enhanced_detection_config.yaml")
        print("- pentest/tech_mappings.yaml")
        
        print("\nDocumentacion:")
        print("- README_MEJORAS_TECNOLOGIAS.md")
        print("- RESUMEN_COMPLETO_MEJORAS.md")
        print("="*60)

def main():
    """Función principal."""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="Activador del sistema mejorado de deteccion de tecnologias"
    )
    
    parser.add_argument(
        "--project-root",
        default=".",
        help="Directorio raiz del proyecto (default: directorio actual)"
    )
    
    args = parser.parse_args()
    
    try:
        activator = EnhancedDetectionActivator(args.project_root)
        
        if activator.activate():
            print("\nActivacion completada exitosamente!")
            sys.exit(0)
        else:
            print("\nActivacion fallo")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\nActivacion interrumpida por el usuario")
        sys.exit(1)
    except Exception as e:
        log.error(f"Error critico: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()