"""M√≥dulo para fingerprinting de hosts activos."""

import json
import logging
import os
from pathlib import Path
from typing import Dict, List, Any

from pentest.runners import run_cmd
from pentest.exceptions import FingerprintError
from pentest.config import DEFAULT_TIMEOUT

# Configuraci√≥n de logging
log = logging.getLogger(__name__)

def fingerprint(subdomains_file: Path, tmp_dir: Path) -> Path:
    """Detecta hosts activos y tecnolog√≠as utilizando httpx.
    
    Args:
        subdomains_file: Archivo con lista de subdominios
        tmp_dir: Directorio temporal para almacenar resultados
        
    Returns:
        Path al archivo JSON con los hosts activos y sus tecnolog√≠as
        
    Raises:
        FingerprintError: Si falla la detecci√≥n de hosts activos
    """
    log.info("üîç Iniciando fingerprinting de hosts activos")
    
    output_file = tmp_dir / "httpx.json"
    
    # Verificar que el archivo de subdominios existe
    if not subdomains_file.exists():
        raise FingerprintError(f"Archivo de subdominios no encontrado: {subdomains_file}")
    
    try:
        # Intentar con httpx (versi√≥n completa)
        log.info("Ejecutando httpx para detectar hosts activos")
        httpx_cmd = [
            "httpx", 
            "-l", str(subdomains_file),
            "-json",
            "-tech-detect",
            "-status-code",
            "-title",
            "-server",
            "-ip",
            "-follow-redirects",
            "-random-agent",
            "-silent",

        ]
        log.debug("Comando httpx: %s", " ".join(httpx_cmd))
        httpx_output = run_cmd(httpx_cmd, timeout=DEFAULT_TIMEOUT, ignore=True)
        log.debug("Salida cruda de httpx: %s", httpx_output)
        
        # Procesar la salida JSON
        results = []
        for line in httpx_output.splitlines():
            if line.strip():
                try:
                    results.append(json.loads(line))
                except json.JSONDecodeError:
                    log.warning("Error al decodificar l√≠nea JSON de httpx: %s", line)
        
        # Guardar resultados
        with open(output_file, "w") as f:
            json.dump(results, f, indent=2)
        
        log.info("‚úÖ Fingerprinting completado: %d hosts activos encontrados", len(results))
        log.debug("Contenido de httpx.json: %s", json.dumps(results, indent=2))
        return output_file
        
    except Exception as e:
        log.warning("httpx fall√≥ con formato JSON completo: %s", str(e))
        
        # Intentar con httpx en modo b√°sico
        try:
            log.info("Intentando httpx en modo b√°sico")
            httpx_cmd = [
                "httpx", 
                "-l", str(subdomains_file),
                "-json",
                "-silent",
    
            ]
            log.debug("Comando httpx (b√°sico): %s", " ".join(httpx_cmd))
            httpx_output = run_cmd(httpx_cmd, timeout=DEFAULT_TIMEOUT, ignore=True)
            log.debug("Salida cruda de httpx (b√°sico): %s", httpx_output)
            
            # Procesar la salida JSON
            results = []
            for line in httpx_output.splitlines():
                if line.strip():
                    try:
                        results.append(json.loads(line))
                    except json.JSONDecodeError:
                        log.warning("Error al decodificar l√≠nea JSON de httpx: %s", line)
            
            # Guardar resultados
            with open(output_file, "w") as f:
                json.dump(results, f, indent=2)
            
            log.info("‚úÖ Fingerprinting b√°sico completado: %d hosts activos encontrados", len(results))
            log.debug("Contenido de httpx.json (b√°sico): %s", json.dumps(results, indent=2))
            return output_file
            
        except Exception as e2:
            log.error("Fall√≥ el fingerprinting con httpx: %s", str(e2))
            
            # √öltimo recurso: crear un JSON b√°sico con los subdominios
            try:
                log.warning("Creando JSON b√°sico con subdominios")
                with open(subdomains_file, "r") as f:
                    domains = [line.strip() for line in f if line.strip()]
                
                basic_results = [
                    {"url": f"http://{domain}", "host": domain} 
                    for domain in domains
                ]
                
                with open(output_file, "w") as f:
                    json.dump(basic_results, f, indent=2)
                
                log.info("‚úÖ Creado JSON b√°sico con %d subdominios", len(basic_results))
                log.debug("Contenido de httpx.json (fallback): %s", json.dumps(basic_results, indent=2))
                return output_file
                
            except Exception as e3:
                # If all attempts fail, create an empty JSON file to prevent downstream errors
                log.error("Todos los intentos de fingerprinting fallaron. Creando archivo JSON vac√≠o.")
                with open(output_file, "w") as f:
                    json.dump([], f) # Write an empty JSON array
                return output_file
                raise FingerprintError(f"Fall√≥ la detecci√≥n de hosts activos: {str(e3)}") from e3