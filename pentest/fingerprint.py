"""Fingerprinting de hosts activos mediante httpx.
Optimizado para: legibilidad, testabilidad y tolerancia a fallos.
"""

from __future__ import annotations

import json
import logging
from pathlib import Path
from typing import List, Dict, Any

from pentest.runners import run_cmd
from pentest.exceptions import FingerprintError
from pentest.config import DEFAULT_TIMEOUT

log = logging.getLogger(__name__)

# ------------------------- Constantes & helpers -----------------------------
COMMON_HTTPX_ARGS: List[str] = [
    "-json", "-status-code", "-title", "-server", "-ip",
    "-follow-redirects", "-random-agent", "-silent",
]

TECH_DETECT_ARGS = ["-tech-detect"]
BASIC_ARGS       = []  # usado en fallback


def _run_httpx(subdomains: Path, extra_args: List[str]) -> str:
    """Ejecuta httpx y devuelve stdout como str (puede lanzar excepción)."""
    cmd = [
        "httpx", "-l", str(subdomains), *extra_args,
    ]
    log.debug("Comando httpx: %s", " ".join(cmd))
    return run_cmd(cmd, timeout=DEFAULT_TIMEOUT, ignore=True)


def _parse_httpx_output(output: str) -> List[Dict[str, Any]]:
    """Convierte la salida línea‑JSON de httpx a lista de dicts."""
    results: List[Dict[str, Any]] = []
    for line in output.splitlines():
        line = line.strip()
        if not line:
            continue
        try:
            results.append(json.loads(line))
        except json.JSONDecodeError:
            log.debug("Línea JSON inválida de httpx: %s", line[:120])
    return results

# --------------------------- API principal ----------------------------------

def fingerprint(subdomains_file: Path, tmp_dir: Path) -> Path:
    """Detecta hosts activos y tecnologías usando httpx.

    Retorna la ruta al archivo httpx.json con los resultados.
    Lanza FingerprintError si todas las estrategias fallan.
    """

    log.info("🔍 Iniciando fingerprinting de hosts activos")
    output_file = tmp_dir / "httpx.json"

    if not subdomains_file.exists():
        raise FingerprintError(f"Archivo de subdominios no encontrado: {subdomains_file}")

    # Estrategias en orden de preferencia
    strategies = [TECH_DETECT_ARGS, BASIC_ARGS]

    for args in strategies:
        try:
            mode = "completo" if args else "básico"
            log.info("Ejecutando httpx (%s)", mode)
            raw = _run_httpx(subdomains_file, COMMON_HTTPX_ARGS + args)
            results = _parse_httpx_output(raw)
            _write_json(output_file, results)
            log.info("✅ Fingerprinting %s completado: %d hosts activos", mode, len(results))
            return output_file
        except Exception as exc:
            log.warning("httpx (%s) falló: %s", mode, exc, exc_info=True)

    # Fallback: devolver cada subdominio como host sin metadata
    try:
        log.warning("Creando salida mínima a partir de subdomains_file (fallback)")
        domains = [d.strip() for d in subdomains_file.read_text().splitlines() if d.strip()]
        fallback = [{"url": f"http://{d}", "host": d} for d in domains]
        _write_json(output_file, fallback)
        log.info("✅ Fallback generado con %d entradas", len(fallback))
        return output_file
    except Exception as e:
        _write_json(output_file, [])
        raise FingerprintError(f"Todos los intentos de fingerprinting fallaron: {e}") from e

# ------------------------- util ---------------------------------------------

def _write_json(path: Path, data: Any) -> None:
    path.write_text(json.dumps(data, indent=2))
    log.debug("Contenido de %s:\n%s", path, path.read_text())
